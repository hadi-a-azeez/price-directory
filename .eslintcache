[{"D:\\Abony Price Directory\\price-directory\\src\\index.js":"1","D:\\Abony Price Directory\\price-directory\\src\\pages\\ProductDetailed.js":"2","D:\\Abony Price Directory\\price-directory\\src\\pages\\Home.js":"3","D:\\Abony Price Directory\\price-directory\\src\\pages\\orders.js":"4","D:\\Abony Price Directory\\price-directory\\src\\pages\\orderDetailed.js":"5","D:\\Abony Price Directory\\price-directory\\src\\pages\\addCategoryAdmin.js":"6","D:\\Abony Price Directory\\price-directory\\src\\config.js":"7","D:\\Abony Price Directory\\price-directory\\src\\components\\tabHeader.js":"8","D:\\Abony Price Directory\\price-directory\\src\\components\\useFormLocal.js":"9","D:\\Abony Price Directory\\price-directory\\src\\API\\order.js":"10","D:\\Abony Price Directory\\price-directory\\src\\pages\\categoryProducts.js":"11","D:\\Abony Price Directory\\price-directory\\src\\pages\\categoriesAdmin.js":"12","D:\\Abony Price Directory\\price-directory\\src\\pages\\Products.js":"13","D:\\Abony Price Directory\\price-directory\\src\\pages\\addOrder.js":"14","D:\\Abony Price Directory\\price-directory\\src\\components\\TableSize.js":"15","D:\\Abony Price Directory\\price-directory\\src\\pages\\productAdd.js":"16","D:\\Abony Price Directory\\price-directory\\src\\pages\\ProductEditAdmin.js":"17","D:\\Abony Price Directory\\price-directory\\src\\API\\category.js":"18","D:\\Abony Price Directory\\price-directory\\src\\API\\product.js":"19","D:\\Abony Price Directory\\price-directory\\src\\components\\CopyItems.js":"20","D:\\Abony Price Directory\\price-directory\\src\\App.js":"21"},{"size":547,"mtime":1611641097299,"results":"22","hashOfConfig":"23"},{"size":10324,"mtime":1611571785624,"results":"24","hashOfConfig":"23"},{"size":1021,"mtime":1610705155321,"results":"25","hashOfConfig":"23"},{"size":4858,"mtime":1611643684061,"results":"26","hashOfConfig":"23"},{"size":13358,"mtime":1611575822951,"results":"27","hashOfConfig":"23"},{"size":2751,"mtime":1611207985246,"results":"28","hashOfConfig":"23"},{"size":50,"mtime":1611039551671,"results":"29","hashOfConfig":"23"},{"size":871,"mtime":1610705348767,"results":"30","hashOfConfig":"23"},{"size":560,"mtime":1610805873643,"results":"31","hashOfConfig":"23"},{"size":1558,"mtime":1611575261265,"results":"32","hashOfConfig":"23"},{"size":4902,"mtime":1611210961918,"results":"33","hashOfConfig":"23"},{"size":3436,"mtime":1611208745432,"results":"34","hashOfConfig":"23"},{"size":5393,"mtime":1611643738712,"results":"35","hashOfConfig":"23"},{"size":12581,"mtime":1611574969423,"results":"36","hashOfConfig":"23"},{"size":1216,"mtime":1608012459744,"results":"37","hashOfConfig":"23"},{"size":12007,"mtime":1611572309848,"results":"38","hashOfConfig":"23"},{"size":7942,"mtime":1611402500720,"results":"39","hashOfConfig":"23"},{"size":415,"mtime":1611039578970,"results":"40","hashOfConfig":"23"},{"size":2010,"mtime":1611039584758,"results":"41","hashOfConfig":"23"},{"size":2792,"mtime":1610694740917,"results":"42","hashOfConfig":"23"},{"size":1639,"mtime":1611038266387,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"6qx1r0",{"filePath":"47","messages":"48","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"46"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"46"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"76"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"90"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Abony Price Directory\\price-directory\\src\\index.js",[],["99","100"],"D:\\Abony Price Directory\\price-directory\\src\\pages\\ProductDetailed.js",["101","102","103","104"],"import React, { useEffect, useState } from \"react\";\r\nimport styles from \"./productDetailed.module.scss\";\r\nimport editIcon from \"../assets/edit.png\";\r\nimport backIcon from \"../assets/backIcon.png\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\"; // requires a loader\r\nimport { Carousel } from \"react-responsive-carousel\";\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { resellerCopy, instagramCopy } from \"../components/CopyItems\";\r\nimport Whatsapp from \"../assets/whatsapp.png\";\r\nimport Instagram from \"../assets/instagram.png\";\r\nimport TableSize from \"../components/TableSize\";\r\nimport { getSingleProduct } from \"../API/product\";\r\nimport { apiRoot } from \"../config\";\r\nimport { saveAs } from \"file-saver\";\r\nimport { DownloadIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Tag,\r\n  Text,\r\n  Heading,\r\n  Box,\r\n  Table,\r\n  Thead,\r\n  Tbody,\r\n  Tr,\r\n  Th,\r\n  Td,\r\n  TableCaption,\r\n  Button,\r\n  Badge,\r\n} from \"@chakra-ui/react\";\r\n\r\nconst ProductDetailed = (props) => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [product, setProduct] = useState([]);\r\n  const [pantVisible, setPantVisible] = useState(\"none\");\r\n  const [topVisible, setTopVisible] = useState(\"none\");\r\n  const history = useHistory();\r\n  const productId = props.match.params.id;\r\n  const [currentImage, setCurrentImage] = useState(0);\r\n  const [copySuccess, setCopySuccess] = useState(\"\");\r\n  const [copySuccessInsta, setcopySuccessInsta] = useState(\"\");\r\n  let pantSizesArr = [\r\n    { name: \"XS\", length: 26 },\r\n    { name: \"S\", length: 28 },\r\n    { name: \"M\", length: 30 },\r\n    { name: \"L\", length: 32 },\r\n    { name: \"XL\", length: 34 },\r\n    { name: \"XXL\", length: 36 },\r\n  ];\r\n  let topSizesArr = [\r\n    { name: \"XS\", length: 36 },\r\n    { name: \"S\", length: 38 },\r\n    { name: \"M\", length: 40 },\r\n    { name: \"L\", length: 42 },\r\n    { name: \"XL\", length: 44 },\r\n    { name: \"XXL\", length: 46 },\r\n  ];\r\n  //function for copying text to clipboard\r\n  function copyText(textToCopy) {\r\n    let textArea;\r\n\r\n    function isOS() {\r\n      return navigator.userAgent.match(/ipad|iphone/i);\r\n    }\r\n\r\n    function createTextArea(text) {\r\n      textArea = document.createElement(\"textArea\");\r\n      textArea.readOnly = true;\r\n      textArea.contentEditable = true;\r\n      textArea.value = text;\r\n      document.body.appendChild(textArea);\r\n    }\r\n\r\n    function selectText() {\r\n      var range, selection;\r\n\r\n      if (isOS()) {\r\n        range = document.createRange();\r\n        range.selectNodeContents(textArea);\r\n        selection = window.getSelection();\r\n        selection.removeAllRanges();\r\n        selection.addRange(range);\r\n        textArea.setSelectionRange(0, 999999);\r\n      } else {\r\n        textArea.select();\r\n      }\r\n    }\r\n\r\n    function copyTo() {\r\n      document.execCommand(\"copy\");\r\n      document.body.removeChild(textArea);\r\n    }\r\n\r\n    createTextArea(textToCopy);\r\n    selectText();\r\n    copyTo();\r\n  }\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    const fetchData = async () => {\r\n      setIsLoading(true);\r\n      const product = await getSingleProduct(productId);\r\n      setProduct(product);\r\n      setIsLoading(false);\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  //download all images\r\n  const downloadAll = () => {\r\n    saveAs(\r\n      `${apiRoot}/product-images/${product.productimages[currentImage].name}`,\r\n      product.code + \"- \" + currentImage\r\n    );\r\n  };\r\n\r\n  const handleBackClick = () => {\r\n    history.goBack();\r\n  };\r\n\r\n  const handlePantToggle = () => {\r\n    if (pantVisible === \"none\") {\r\n      setPantVisible(\"block\");\r\n    } else {\r\n      setPantVisible(\"none\");\r\n    }\r\n  };\r\n\r\n  const handleTopToggle = () => {\r\n    if (topVisible === \"none\") {\r\n      setTopVisible(\"block\");\r\n    } else {\r\n      setTopVisible(\"none\");\r\n    }\r\n  };\r\n  const { sizeXS, sizeS, sizeM, sizeL, sizeXL, sizeXXL } = product;\r\n  let availableSizesArr = [\r\n    { name: \"XS\", stock: sizeXS },\r\n    { name: \"S\", stock: sizeS },\r\n    { name: \"M\", stock: sizeM },\r\n    { name: \"L\", stock: sizeL },\r\n    { name: \"XL\", stock: sizeXL },\r\n    { name: \"XXL\", stock: sizeXXL },\r\n  ];\r\n  //filter array to size avaialable >0\r\n  let availableSizesFiltered = availableSizesArr.filter(\r\n    (size) => size.stock > 0\r\n  );\r\n\r\n  let arr = [\r\n    { XS: sizeXS },\r\n    { S: sizeS },\r\n    { M: sizeM },\r\n    { L: sizeL },\r\n    { XL: sizeXL },\r\n    { XXL: sizeXXL },\r\n  ];\r\n  let sizeArr = availableSizesFiltered.map((size) => size.name);\r\n  return (\r\n    <>\r\n      <div className={styles.header}>\r\n        <button className={styles.backButton} onClick={handleBackClick}>\r\n          <img src={backIcon} className={styles.backIcon} alt=\"back_icon\" />\r\n        </button>\r\n\r\n        <h1 className={styles.label}>Product</h1>\r\n        <button\r\n          className={styles.editButton}\r\n          onClick={() =>\r\n            history.push(`/admin/product_edit_admin/${product.id}`)\r\n          }\r\n        >\r\n          <img src={editIcon} className={styles.editIcon} alt=\"back_icon\" />\r\n        </button>\r\n      </div>\r\n      {isLoading ? (\r\n        <div className={styles.loaderwraper}>\r\n          <Loader\r\n            type=\"Oval\"\r\n            color=\"#0278ae\"\r\n            height={50}\r\n            width={50}\r\n            visible={isLoading}\r\n          />\r\n        </div>\r\n      ) : (\r\n        <div></div>\r\n      )}\r\n      {!isLoading && (\r\n        <>\r\n          <div className={styles.container}>\r\n            <Carousel\r\n              infiniteLoop\r\n              dynamicHeight\r\n              showThumbs={false}\r\n              onChange={(i) => setCurrentImage(i)}\r\n              showStatus={false}\r\n              className={styles.carousel}\r\n            >\r\n              {product.productimages &&\r\n                product.productimages.map((imageNew) => (\r\n                  <div style={{ height: `500px`, backgroundColor: `white` }}>\r\n                    <img\r\n                      src={`${apiRoot}/product-images/min/${imageNew.name}`}\r\n                      className={styles.image}\r\n                      alt=\"image_preview\"\r\n                    />\r\n                  </div>\r\n                ))}\r\n            </Carousel>\r\n            <div className={styles.details}>\r\n              <Button\r\n                leftIcon={<DownloadIcon />}\r\n                colorScheme=\"blue\"\r\n                mt=\"3\"\r\n                onClick={() => downloadAll()}\r\n              >\r\n                Download Image\r\n              </Button>\r\n              <Tag colorScheme=\"green\" mt=\"8\" size=\"lg\">\r\n                {product.type}\r\n              </Tag>\r\n              <Heading mb={1}>{product.code}</Heading>\r\n\r\n              <Heading color=\"red.500\" fontSize=\"3xl\">\r\n                {\" \"}\r\n                {`₹${product.price}`}\r\n              </Heading>\r\n              <Text fontSize=\"2xl\">\r\n                Reseller :\r\n                {` ₹${parseInt(product.price - (product.price / 100) * 10)}`}\r\n              </Text>\r\n              <Text fontSize=\"2xl\" mb=\"5\">\r\n                Fabric: {product.fabric}\r\n              </Text>\r\n              <button\r\n                className={styles.btnWtsp}\r\n                onClick={() => {\r\n                  copyText(resellerCopy(product, sizeArr));\r\n                  setCopySuccess(\"copied!\");\r\n                }}\r\n              >\r\n                <img\r\n                  src={Whatsapp}\r\n                  alt=\"whatsapp\"\r\n                  width=\"20px\"\r\n                  height=\"20px\"\r\n                  style={{ marginRight: `3px` }}\r\n                />\r\n                Copy For Resellers\r\n              </button>\r\n              {/* show copied text status */}\r\n              <p>{copySuccess}</p>\r\n              <button\r\n                className={styles.btnInstagram}\r\n                onClick={() => {\r\n                  copyText(instagramCopy(product));\r\n                  setcopySuccessInsta(\"copied!\");\r\n                }}\r\n              >\r\n                <img\r\n                  src={Instagram}\r\n                  width=\"20px\"\r\n                  alt=\"instagram\"\r\n                  height=\"20px\"\r\n                  style={{ marginRight: `3px` }}\r\n                />\r\n                Copy For Instagram\r\n              </button>\r\n              {/* show copied text status */}\r\n              <p>{copySuccessInsta}</p>\r\n              <div>\r\n                <Box\r\n                  rounded=\"md\"\r\n                  bg=\"white\"\r\n                  boxShadow=\"xs\"\r\n                  key={product.id}\r\n                  d=\"flex\"\r\n                  direction=\"row\"\r\n                  justifyContent=\"center\"\r\n                  w=\"95%\"\r\n                  flexShrink=\"0\"\r\n                  mt=\"3\"\r\n                >\r\n                  <Table variant=\"striped\" colorScheme=\"teal\">\r\n                    <Thead>\r\n                      <Tr>\r\n                        <Th>Size</Th>\r\n                        <Th>Stock</Th>\r\n                      </Tr>\r\n                    </Thead>\r\n                    <Tbody>\r\n                      {availableSizesFiltered &&\r\n                        availableSizesFiltered.map((size, index) => (\r\n                          <Tr key={index}>\r\n                            <Td>{size.name}</Td>\r\n                            <Td>{size.stock}</Td>\r\n                          </Tr>\r\n                        ))}\r\n                    </Tbody>\r\n                  </Table>\r\n                </Box>\r\n              </div>\r\n              <h1 className={styles.fabric}>Size Chart </h1>\r\n              <button className={styles.pantOrTop} onClick={handlePantToggle}>\r\n                Pant\r\n              </button>\r\n              <TableSize\r\n                display={pantVisible}\r\n                column1=\"Size\"\r\n                column2=\"Length\"\r\n                list={pantSizesArr}\r\n              />\r\n              <button className={styles.pantOrTop} onClick={handleTopToggle}>\r\n                Top\r\n              </button>\r\n              <TableSize\r\n                display={topVisible}\r\n                column1=\"Size\"\r\n                column2=\"Length\"\r\n                list={topSizesArr}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div style={{ marginTop: `20px` }} />\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProductDetailed;\r\n","D:\\Abony Price Directory\\price-directory\\src\\pages\\Home.js",["105"],"import React from \"react\";\r\nimport styles from \"./home.module.scss\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport User from \"../assets/user.png\";\r\nimport Admin from \"../assets/admin.png\";\r\nimport Orders from \"../assets/orders.png\";\r\n\r\nconst Home = () => {\r\n  const history = useHistory();\r\n\r\n  return (\r\n    <>\r\n      <div className={styles.header}>\r\n        <h1 className={styles.label}>Abony Clothing</h1>\r\n      </div>\r\n      <div className={styles.container}>\r\n        <button\r\n          className={styles.card}\r\n          onClick={() => history.push(\"/products\")}\r\n        >\r\n          <img src={User} className={styles.icon} alt=\"icon\" />\r\n          <h1 className={styles.cardHeading}>Products</h1>\r\n        </button>\r\n\r\n        <button className={styles.card} onClick={() => history.push(\"/orders\")}>\r\n          <img src={Orders} className={styles.icon} alt=\"icon\" />\r\n          <h1 className={styles.cardHeading}>Orders</h1>\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","D:\\Abony Price Directory\\price-directory\\src\\pages\\orders.js",["106","107","108","109","110"],"D:\\Abony Price Directory\\price-directory\\src\\pages\\orderDetailed.js",["111","112","113","114"],"import { React, useRef, useState, useEffect } from \"react\";\r\nimport styles from \"./addOrder.module.scss\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport backIcon from \"../assets/backIcon.png\";\r\nimport { useFormLocal } from \"../components/useFormLocal\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\nimport { apiRoot } from \"../config\";\r\nimport {\r\n  getSingleOrderAPI,\r\n  updateOrderAPI,\r\n  deleteOrderAPI,\r\n} from \"../API/order\";\r\nimport {\r\n  Input,\r\n  FormControl,\r\n  FormLabel,\r\n  Textarea,\r\n  Stack,\r\n  Radio,\r\n  RadioGroup,\r\n  Button,\r\n  useToast,\r\n  AlertDialog,\r\n  AlertDialogBody,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogContent,\r\n  AlertDialogOverlay,\r\n  border,\r\n} from \"@chakra-ui/react\";\r\n\r\nconst OrderDetailed = (props) => {\r\n  const [isUpdateOpen, setIsUpdateOpen] = useState(false); //setting state for update btn modal\r\n  const [isDeleteOpen, setIsDeleteOpen] = useState(false); //setting state for delete btn modal\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [order, setOrder, updateOrder] = useFormLocal([]);\r\n  const [orderTotal, setOrderTotal] = useState(0);\r\n\r\n  const [isBtnLoading, setIsBtnLoading] = useState(false);\r\n\r\n  const cancelRef = useRef();\r\n  const history = useHistory();\r\n  const orderId = props.match.params.id;\r\n  const toast = useToast();\r\n  const updateModal = {\r\n    header: \"Update Order\",\r\n    body: \"Are you sure you want to update this order ?\",\r\n    button: \"Update\",\r\n    btnColor: \"green\",\r\n  };\r\n  const deleteModal = {\r\n    header: \"Delete Order\",\r\n    body: \"Are you sure you want to delete this order ?\",\r\n    button: \"Delete\",\r\n    btnColor: \"red\",\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setIsLoading(true);\r\n      const orderResponse = await getSingleOrderAPI(orderId);\r\n      console.log(orderResponse);\r\n      setOrder(orderResponse.data);\r\n      const amountFull = orderResponse.data.orderproducts.reduce(\r\n        (acc, curr) => acc + curr.price,\r\n        0\r\n      );\r\n      setOrderTotal(amountFull);\r\n      setIsLoading(false);\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  const handleUpdateOrder = async () => {\r\n    setIsUpdateOpen(false);\r\n    setIsBtnLoading(true);\r\n    const updateResponse = await updateOrderAPI(\r\n      {\r\n        status: order.status,\r\n        tracking_id: order.tracking_id,\r\n        order_note: order.order_note,\r\n      },\r\n      orderId\r\n    );\r\n    setIsBtnLoading(false);\r\n    toast({\r\n      title: \"Order updated.\",\r\n      description: \"Order updated successfully.\",\r\n      status: \"success\",\r\n      duration: 2000,\r\n      isClosable: true,\r\n      position: \"bottom\",\r\n    });\r\n  };\r\n\r\n  const handlDeleteOrder = async () => {\r\n    await deleteOrderAPI(orderId);\r\n    history.goBack();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className={styles.header}>\r\n        <button className={styles.backButton} onClick={() => history.goBack()}>\r\n          <img src={backIcon} className={styles.backIcon} alt=\"back_icon\" />\r\n        </button>\r\n        <h1 className={styles.label}>Order Detailed</h1>\r\n      </div>\r\n      {isLoading ? (\r\n        <div className={styles.loaderwraper}>\r\n          <Loader\r\n            type=\"Oval\"\r\n            color=\"#0278ae\"\r\n            height={50}\r\n            width={50}\r\n            visible={isLoading}\r\n          />\r\n        </div>\r\n      ) : (\r\n        <div></div>\r\n      )}\r\n      <div className={styles.container}>\r\n        {!isLoading && (\r\n          <>\r\n            <FormControl w=\"90%\" mt=\"2\">\r\n              <FormLabel>Order Full Amount</FormLabel>\r\n              <Input\r\n                type=\"text\"\r\n                size=\"lg\"\r\n                name=\"order\"\r\n                value={`₹${orderTotal}`}\r\n                variant=\"filled\"\r\n                disabled\r\n              />\r\n            </FormControl>\r\n            <FormControl id=\"date\" w=\"90%\" mt=\"2\">\r\n              <FormLabel>Order Date</FormLabel>\r\n              {order.date && (\r\n                <Input\r\n                  type=\"text\"\r\n                  size=\"lg\"\r\n                  name=\"order\"\r\n                  value={new Date(order.date).toLocaleDateString()}\r\n                  variant=\"filled\"\r\n                  disabled\r\n                />\r\n              )}\r\n            </FormControl>\r\n            <FormControl id=\"customer_name\" w=\"90%\" mt=\"2\" isRequired>\r\n              <FormLabel>Order ID:</FormLabel>\r\n              <Input\r\n                type=\"text\"\r\n                size=\"lg\"\r\n                name=\"customer_name\"\r\n                value={order.id}\r\n                variant=\"filled\"\r\n                disabled\r\n              />\r\n            </FormControl>\r\n            <FormControl id=\"customer_name\" w=\"90%\" mt=\"2\" isRequired>\r\n              <FormLabel>Customer Name :</FormLabel>\r\n              <Input\r\n                type=\"text\"\r\n                size=\"lg\"\r\n                name=\"customer_name\"\r\n                value={order.name}\r\n                variant=\"filled\"\r\n                disabled\r\n              />\r\n            </FormControl>\r\n            <FormControl id=\"customer_address\" w=\"90%\" mt=\"2\" isRequired>\r\n              <FormLabel>Address :</FormLabel>\r\n              <Textarea\r\n                type=\"text\"\r\n                size=\"lg\"\r\n                rows=\"4\"\r\n                name=\"customer_address\"\r\n                value={order.address}\r\n                variant=\"filled\"\r\n                disabled\r\n              />\r\n            </FormControl>\r\n            <h1>Products</h1>\r\n            {order.orderproducts &&\r\n              order.orderproducts.map((product) => (\r\n                <div\r\n                  key={product.id}\r\n                  style={{\r\n                    width: \"90%\",\r\n                    border: \"1px solid grey\",\r\n                    borderRadius: \"5px\",\r\n                    padding: \"15px\",\r\n                    marginBottom: \"8px\",\r\n                  }}\r\n                >\r\n                  <img\r\n                    src={`${apiRoot}/order-images/${product.image}.jpeg`}\r\n                    width=\"100\"\r\n                  />\r\n                  <FormControl id=\"product_cod\" w=\"90%\" mt=\"2\" isRequired>\r\n                    <FormLabel>Product Code:</FormLabel>\r\n                    <Input\r\n                      type=\"text\"\r\n                      size=\"lg\"\r\n                      name=\"product_cod\"\r\n                      variant=\"filled\"\r\n                      value={product.code}\r\n                      disabled\r\n                    />\r\n                  </FormControl>\r\n                  <Stack direction=\"row\">\r\n                    <FormControl id=\"product_price\" w=\"90%\" mt=\"2\" isRequired>\r\n                      <FormLabel>Product Price :</FormLabel>\r\n                      <Input\r\n                        type=\"number\"\r\n                        size=\"lg\"\r\n                        name=\"product_price\"\r\n                        variant=\"filled\"\r\n                        value={product.price}\r\n                        disabled\r\n                      />\r\n                    </FormControl>\r\n                    <FormControl id=\"product_size\" w=\"90%\" mt=\"2\" isRequired>\r\n                      <FormLabel>Product Size :</FormLabel>\r\n                      <Input\r\n                        type=\"text\"\r\n                        size=\"lg\"\r\n                        name=\"product_size\"\r\n                        variant=\"filled\"\r\n                        value={product.size}\r\n                        disabled\r\n                      />\r\n                    </FormControl>\r\n                  </Stack>\r\n                </div>\r\n              ))}\r\n            <FormControl id=\"payment_method\" w=\"90%\" mt=\"2\" isRequired>\r\n              <FormLabel>Payment Method :</FormLabel>\r\n              <RadioGroup\r\n                disabled\r\n                value={order.payment_method}\r\n                name=\"payement_method\"\r\n              >\r\n                <Stack direction=\"row\">\r\n                  <Radio value=\"GPAY\">Gpay PhonePe</Radio>\r\n                  <Radio value=\"ACCOUNT\">Account Transfer</Radio>\r\n                  <Radio value=\"COD\">COD</Radio>\r\n                </Stack>\r\n              </RadioGroup>\r\n            </FormControl>\r\n\r\n            <FormControl id=\"trasfer_details\" w=\"90%\" mt=\"2\" isRequired>\r\n              <FormLabel>Transfer Details :</FormLabel>\r\n              <Textarea\r\n                type=\"text\"\r\n                size=\"lg\"\r\n                rows=\"2\"\r\n                name=\"transfer_details\"\r\n                variant=\"filled\"\r\n                value={order.transfer_details || \"\"}\r\n                disabled\r\n              />\r\n            </FormControl>\r\n\r\n            <FormControl id=\"order_status\" w=\"90%\" mt=\"2\" isRequired>\r\n              <FormLabel>Order Status :</FormLabel>\r\n              <RadioGroup value={order.status}>\r\n                <Stack direction=\"row\">\r\n                  <Radio value=\"ACCEPTED\" onChange={updateOrder} name=\"status\">\r\n                    Accepted\r\n                  </Radio>\r\n                  <Radio\r\n                    value=\"DISPATCHED\"\r\n                    onChange={updateOrder}\r\n                    name=\"status\"\r\n                  >\r\n                    Dispatched\r\n                  </Radio>\r\n                  <Radio value=\"DELIVERED\" onChange={updateOrder} name=\"status\">\r\n                    Delivered\r\n                  </Radio>\r\n                </Stack>\r\n              </RadioGroup>\r\n            </FormControl>\r\n            <FormControl id=\"tracking_id\" w=\"90%\" mt=\"2\" isRequired>\r\n              <FormLabel>Tracking Id :</FormLabel>\r\n              <Input\r\n                type=\"text\"\r\n                size=\"lg\"\r\n                name=\"tracking_id\"\r\n                value={order.tracking_id || \"\"}\r\n                onChange={updateOrder}\r\n              />\r\n            </FormControl>\r\n            <FormControl id=\"date\" w=\"90%\" mt=\"2\">\r\n              <FormLabel>Order Note</FormLabel>\r\n\r\n              <Input\r\n                type=\"text\"\r\n                size=\"lg\"\r\n                name=\"order_note\"\r\n                value={order.order_note || \"\"}\r\n                onChange={updateOrder}\r\n              />\r\n            </FormControl>\r\n            <Button\r\n              colorScheme=\"teal\"\r\n              variant=\"solid\"\r\n              size=\"xs\"\r\n              w=\"90%\"\r\n              padding=\"6\"\r\n              mt=\"6\"\r\n              isLoading={isBtnLoading}\r\n              loadingText=\"Updating\"\r\n              onClick={() => setIsUpdateOpen(true)}\r\n            >\r\n              Update Order\r\n            </Button>\r\n            <Button\r\n              colorScheme=\"red\"\r\n              variant=\"solid\"\r\n              size=\"xs\"\r\n              w=\"90%\"\r\n              padding=\"6\"\r\n              mt=\"3\"\r\n              mb=\"6\"\r\n              onClick={() => setIsDeleteOpen(true)}\r\n            >\r\n              Delete Order\r\n            </Button>\r\n            {/* alert dialog for update */}\r\n            <AlertDialog\r\n              isOpen={isUpdateOpen}\r\n              leastDestructiveRef={cancelRef}\r\n              onClose={() => isUpdateOpen(false)}\r\n            >\r\n              <AlertDialogOverlay>\r\n                <AlertDialogContent w=\"90%\" pos=\"center\">\r\n                  <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\r\n                    {updateModal.header}\r\n                  </AlertDialogHeader>\r\n\r\n                  <AlertDialogBody>{updateModal.body}</AlertDialogBody>\r\n\r\n                  <AlertDialogFooter>\r\n                    <Button\r\n                      ref={cancelRef}\r\n                      onClick={() => setIsUpdateOpen(false)}\r\n                    >\r\n                      Cancel\r\n                    </Button>\r\n                    <Button\r\n                      colorScheme={updateModal.btnColor}\r\n                      ml={3}\r\n                      onClick={handleUpdateOrder}\r\n                    >\r\n                      Update\r\n                    </Button>\r\n                  </AlertDialogFooter>\r\n                </AlertDialogContent>\r\n              </AlertDialogOverlay>\r\n            </AlertDialog>\r\n            {/* alert dialog for delete */}\r\n            <AlertDialog\r\n              isOpen={isDeleteOpen}\r\n              leastDestructiveRef={cancelRef}\r\n              onClose={() => setIsDeleteOpen(false)}\r\n            >\r\n              <AlertDialogOverlay>\r\n                <AlertDialogContent w=\"90%\" pos=\"center\">\r\n                  <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\r\n                    {deleteModal.header}\r\n                  </AlertDialogHeader>\r\n\r\n                  <AlertDialogBody>{deleteModal.body}</AlertDialogBody>\r\n\r\n                  <AlertDialogFooter>\r\n                    <Button\r\n                      ref={cancelRef}\r\n                      onClick={() => setIsDeleteOpen(false)}\r\n                    >\r\n                      Cancel\r\n                    </Button>\r\n                    <Button\r\n                      colorScheme={deleteModal.btnColor}\r\n                      ml={3}\r\n                      onClick={handlDeleteOrder}\r\n                    >\r\n                      Delete\r\n                    </Button>\r\n                  </AlertDialogFooter>\r\n                </AlertDialogContent>\r\n              </AlertDialogOverlay>\r\n            </AlertDialog>\r\n          </>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default OrderDetailed;\r\n","D:\\Abony Price Directory\\price-directory\\src\\pages\\addCategoryAdmin.js",["115","116","117","118"],"import { useState } from \"react\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport backIcon from \"../assets/backIcon.png\";\r\nimport styles from \"./productadd.module.scss\";\r\nimport { addcategoriesAPI } from \"../API/category\";\r\nimport {\r\n  Input,\r\n  InputGroup,\r\n  InputRightElement,\r\n  IconButton,\r\n  Box,\r\n  Select,\r\n  FormControl,\r\n  FormLabel,\r\n} from \"@chakra-ui/react\";\r\n\r\nconst AddCategory = () => {\r\n  const [category, setCategory] = useState(\"\");\r\n  const [parentCategory, setParentCategory] = useState(\"Top\");\r\n  const history = useHistory();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const handleAddCategory = async () => {\r\n    setIsLoading(true);\r\n    const responseCategory = await addcategoriesAPI({\r\n      name: category,\r\n      type: parentCategory,\r\n    });\r\n    console.log(responseCategory);\r\n    setIsLoading(false);\r\n    history.push(\"/admin/categories\");\r\n  };\r\n\r\n  const handleParentCategoryClick = (val) => {\r\n    setParentCategory(val);\r\n  };\r\n\r\n  const handleBackClick = () => {\r\n    history.goBack();\r\n  };\r\n  return (\r\n    <>\r\n      <div className={styles.header}>\r\n        <button className={styles.backButton} onClick={handleBackClick}>\r\n          <img src={backIcon} className={styles.backIcon} alt=\"back_icon\" />\r\n        </button>\r\n        <h1 className={styles.label}>Add Category</h1>\r\n      </div>\r\n      <div className={styles.container}>\r\n        <FormControl w=\"90%\" mt=\"2\" isRequired>\r\n          <FormLabel>Parent Category</FormLabel>\r\n          <Select\r\n            name=\"parent_categories\"\r\n            id=\"parent_categories\"\r\n            w=\"100%\"\r\n            size=\"lg\"\r\n            onChange={(e) => handleParentCategoryClick(e.target.value)}\r\n          >\r\n            <option value=\"Top\">Top</option>\r\n            <option value=\"Pant\">Pant</option>\r\n          </Select>\r\n        </FormControl>\r\n        <FormControl w=\"90%\" mt=\"2\" isRequired>\r\n          <FormLabel>Category Name</FormLabel>\r\n          <Input\r\n            type=\"text\"\r\n            size=\"lg\"\r\n            onChange={(e) => setCategory(e.target.value)}\r\n          />\r\n        </FormControl>\r\n        <button onClick={handleAddCategory} className={styles.btnPrimary}>\r\n          {isLoading ? (\r\n            <div className={styles.loader}>\r\n              <Loader\r\n                type=\"Oval\"\r\n                color=\"white\"\r\n                height={18}\r\n                width={18}\r\n                visible={isLoading}\r\n              />\r\n            </div>\r\n          ) : (\r\n            <div>Add Category</div>\r\n          )}\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddCategory;\r\n","D:\\Abony Price Directory\\price-directory\\src\\config.js",[],["119","120"],"D:\\Abony Price Directory\\price-directory\\src\\components\\tabHeader.js",[],["121","122"],"D:\\Abony Price Directory\\price-directory\\src\\components\\useFormLocal.js",[],"D:\\Abony Price Directory\\price-directory\\src\\API\\order.js",["123"],"D:\\Abony Price Directory\\price-directory\\src\\pages\\categoryProducts.js",["124","125","126","127"],"D:\\Abony Price Directory\\price-directory\\src\\pages\\categoriesAdmin.js",["128","129","130","131","132","133","134","135"],"import { useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styles from \"./products.module.scss\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport { SearchIcon, ArrowBackIcon } from \"@chakra-ui/icons\";\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\nimport TabHeader from \"../components/tabHeader\";\r\nimport { getcategoriesAPI } from \"../API/category\";\r\nimport {\r\n  Input,\r\n  InputGroup,\r\n  InputRightElement,\r\n  IconButton,\r\n  Box,\r\n  Select,\r\n} from \"@chakra-ui/react\";\r\n\r\nconst CategoriesAdmin = () => {\r\n  const [isLoading, setIsLoading] = useState();\r\n  const [categories, setCategories] = useState([]);\r\n  const [filtered, setFiltered] = useState([]);\r\n  const [filter, setFilter] = useState(\"\");\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const fetchCategories = async () => {\r\n      setIsLoading(true);\r\n      const categoriesResponse = await getcategoriesAPI();\r\n      setCategories(categoriesResponse.data);\r\n      setIsLoading(false);\r\n    };\r\n\r\n    fetchCategories();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    handleFilter(\"Top\");\r\n  }, [categories]);\r\n  const handleFilter = (cat) => {\r\n    setFiltered(categories.filter((category) => category.type === cat));\r\n    console.log(cat);\r\n    console.log(\"nice\", filtered);\r\n  };\r\n\r\n  const handleAddCategory = () => {\r\n    history.push(\"/admin/add_category\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className={styles.header}>\r\n        <IconButton\r\n          borderRadius=\"full\"\r\n          colorScheme=\"blue\"\r\n          ml=\"4\"\r\n          mt=\"2\"\r\n          alignSelf=\"flex-start\"\r\n          icon={<ArrowBackIcon color=\"white\" />}\r\n          onClick={() => history.push(\"/\")}\r\n        />\r\n\r\n        <TabHeader selected=\"categories\" />\r\n      </div>\r\n      {isLoading ? (\r\n        <div className={styles.loaderwraper}>\r\n          <Loader\r\n            type=\"Oval\"\r\n            color=\"#0278ae\"\r\n            height={50}\r\n            width={50}\r\n            visible={isLoading}\r\n          />\r\n        </div>\r\n      ) : (\r\n        <div></div>\r\n      )}\r\n      <div className={styles.container}>\r\n        <Select\r\n          name=\"parent_categories\"\r\n          id=\"parent_categories\"\r\n          size=\"lg\"\r\n          w=\"95%\"\r\n          onChange={(e) => handleFilter(e.target.value)}\r\n        >\r\n          <option value=\"Top\">Top</option>\r\n          <option value=\"Pant\">Pant</option>\r\n        </Select>\r\n        {!isLoading &&\r\n          filtered.map((category) => (\r\n            <Link\r\n              to={`/admin/category_products/${category.id}`}\r\n              key={category.id}\r\n              className={styles.link}\r\n            >\r\n              <Box\r\n                rounded=\"md\"\r\n                bg=\"white\"\r\n                boxShadow=\"xs\"\r\n                justifyContent=\"center\"\r\n                w=\"95%\"\r\n                flexShrink=\"0\"\r\n                padding=\"3\"\r\n                mt=\"3\"\r\n                height=\"auto\"\r\n                mt=\"2\"\r\n                key={category.id}\r\n              >\r\n                <h1 style={{ fontSize: `22px`, padding: `13px` }}>\r\n                  {category.name}\r\n                </h1>\r\n              </Box>\r\n            </Link>\r\n          ))}\r\n        <button onClick={handleAddCategory} className={styles.btnFloat}>\r\n          +\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CategoriesAdmin;\r\n",["136","137"],"D:\\Abony Price Directory\\price-directory\\src\\pages\\Products.js",["138","139","140"],"D:\\Abony Price Directory\\price-directory\\src\\pages\\addOrder.js",["141","142","143","144","145","146","147","148"],"D:\\Abony Price Directory\\price-directory\\src\\components\\TableSize.js",[],"D:\\Abony Price Directory\\price-directory\\src\\pages\\productAdd.js",["149","150","151","152","153","154","155"],"import { useState, useEffect, useRef } from \"react\";\r\nimport imageCompression from \"browser-image-compression\";\r\nimport styles from \"./productadd.module.scss\";\r\nimport Placeholder from \"../assets/placeholder.png\";\r\n\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport backIcon from \"../assets/backIcon.png\";\r\nimport { getcategoriesAPI } from \"../API/category\";\r\nimport { useFormLocal } from \"../components/useFormLocal\";\r\nimport {\r\n  Table,\r\n  Thead,\r\n  Tbody,\r\n  Tr,\r\n  Th,\r\n  Td,\r\n  TableCaption,\r\n} from \"@chakra-ui/react\";\r\nimport {\r\n  Box,\r\n  InputGroup,\r\n  InputRightElement,\r\n  Input,\r\n  FormControl,\r\n  FormLabel,\r\n  Select,\r\n  Stack,\r\n  Image,\r\n  Button,\r\n  SimpleGrid,\r\n  AlertDialog,\r\n  AlertDialogBody,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogContent,\r\n  AlertDialogOverlay,\r\n} from \"@chakra-ui/react\";\r\nimport { addProductAPI, uploadImagesAPI } from \"../API/product\";\r\n\r\nconst ProductAdd = () => {\r\n  const [product_image, setProductImage] = useState([]);\r\n  const [codeType, setCodeType] = useState(\"PNR\");\r\n  const [productCod, setProductCod] = useState(\"\");\r\n  const [product, setProduct, updateProduct] = useFormLocal({});\r\n  const [isValidationError, setIsValidationError] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const history = useHistory();\r\n  const cancelRef = useRef();\r\n  const fabricsArray = [\r\n    \"Cotton\",\r\n    \"Muslin\",\r\n    \"Rayon\",\r\n    \"Denim\",\r\n    \"Gorjet\",\r\n    \"Linen\",\r\n    \"Cotton mix\",\r\n    \"Linen cotton\",\r\n    \"Schifon\",\r\n  ];\r\n  const typeArray = [\"Top\", \"Pant\", \"Set\"];\r\n  const [categories, setCategories] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchCategories = async () => {\r\n      setIsLoading(true);\r\n\r\n      const categories = await getcategoriesAPI();\r\n      setCategories(categories.data);\r\n      setIsLoading(false);\r\n      setProduct({ type: \"Top\" });\r\n    };\r\n    fetchCategories();\r\n  }, []);\r\n\r\n  const addProduct = async () => {\r\n    setIsOpen(false);\r\n    setIsLoading(true);\r\n    const productResponse = await addProductAPI({\r\n      ...product,\r\n      code: codeType + productCod,\r\n    });\r\n    let imageNames = await uploadImagesAPI(\r\n      product_image,\r\n      productResponse.data.id\r\n    );\r\n    setIsLoading(false);\r\n    history.push(\"/products\");\r\n  };\r\n  const deleteImageFromArr = (image) => {\r\n    setProductImage((previmage) =>\r\n      previmage.filter(\r\n        (imageInState) => imageInState.imageName !== image.imageName\r\n      )\r\n    );\r\n  };\r\n\r\n  const validateFields = (addCallback) => {\r\n    if (!productCod || !product.price) {\r\n      setIsOpen(false);\r\n      setIsValidationError(true);\r\n    } else {\r\n      setIsValidationError(false);\r\n      setIsOpen(false);\r\n      setIsValidationError(false);\r\n      addCallback();\r\n    }\r\n  };\r\n  const SizeProduct = ({ name, title }) => {\r\n    return (\r\n      <Tr>\r\n        <Td>{title}</Td>\r\n        <Td>\r\n          <Button\r\n            size=\"xs\"\r\n            colorScheme=\"red\"\r\n            onClick={() => setProduct({ [name]: --product[name] || 0 })}\r\n            mr=\"5\"\r\n          >\r\n            -\r\n          </Button>\r\n          {product[name] || 0}\r\n          <Button\r\n            ml=\"5\"\r\n            colorScheme=\"teal\"\r\n            onClick={() => setProduct({ [name]: ++product[name] || 1 })}\r\n          >\r\n            +\r\n          </Button>\r\n        </Td>\r\n      </Tr>\r\n    );\r\n  };\r\n\r\n  const compressImage = async (event) => {\r\n    //compresses image to below 1MB\r\n    let imagesFromInput = event.target.files;\r\n    const options = {\r\n      maxSizeMB: 3,\r\n      maxWidthOrHeight: 1280,\r\n      useWebWorker: true,\r\n    };\r\n    try {\r\n      for (let i = 0; i < imagesFromInput.length; i++) {\r\n        const compressedFile = await imageCompression(\r\n          imagesFromInput[i],\r\n          options\r\n        );\r\n        let imageName = uuidv4();\r\n        compressedFile.lastModifiedDate = new Date();\r\n        const convertedBlobFile = new File(\r\n          [compressedFile],\r\n          imagesFromInput[i].name,\r\n          {\r\n            type: imagesFromInput[i].type,\r\n            lastModified: Date.now(),\r\n          }\r\n        );\r\n        setProductImage((oldArray) => [\r\n          ...oldArray,\r\n          { image: convertedBlobFile, imageName },\r\n        ]);\r\n      }\r\n\r\n      // setProductImageConverted(URL.createObjectURL(compressedFile));\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const handleBackClick = () => {\r\n    history.goBack();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className={styles.header}>\r\n        <button className={styles.backButton} onClick={handleBackClick}>\r\n          <img src={backIcon} className={styles.backIcon} alt=\"back_icon\" />\r\n        </button>\r\n        <h1 className={styles.label}>Add Product</h1>\r\n      </div>\r\n      <div className={styles.container}>\r\n        <SimpleGrid columns={3} spacing={2} mt=\"6\" mb=\"6\" w=\"90%\">\r\n          {product_image.length > 0 ? (\r\n            product_image.map((image, index) => (\r\n              <Image\r\n                key={index}\r\n                style={{ background: \"#212121\" }}\r\n                src={URL.createObjectURL(image.image)}\r\n                boxSize=\"100px\"\r\n                objectFit=\"cover\"\r\n                alt=\"image_preview\"\r\n                onClick={() => deleteImageFromArr(image)}\r\n              />\r\n            ))\r\n          ) : (\r\n            <Image src={Placeholder} boxSize=\"100px\" alt=\"image_preview\" />\r\n          )}\r\n          <label htmlFor=\"file-upload\" className={styles.customFileUpload}>\r\n            +\r\n          </label>\r\n        </SimpleGrid>\r\n        <input\r\n          type=\"file\"\r\n          accept=\"image/*\"\r\n          id=\"file-upload\"\r\n          onChange={(event) => compressImage(event)}\r\n          multiple\r\n        />\r\n        <FormControl id=\"product_cod\" w=\"90%\" mt=\"2\" isRequired>\r\n          <FormLabel>Product cod</FormLabel>\r\n          <Stack direction=\"row\">\r\n            <Select\r\n              w=\"40%\"\r\n              size=\"lg\"\r\n              onChange={(e) => setCodeType(e.target.value)}\r\n              value={codeType || \"\"}\r\n            >\r\n              <option value=\"PNR\">PNR</option>\r\n              <option value=\"AB\">AB</option>\r\n            </Select>\r\n            <Input\r\n              type=\"number\"\r\n              onChange={(e) => {\r\n                setProductCod(e.target.value);\r\n              }}\r\n              name=\"product_cod\"\r\n              size=\"lg\"\r\n              value={productCod}\r\n            />\r\n          </Stack>\r\n        </FormControl>\r\n        <FormControl id=\"product_cod\" w=\"90%\" mt=\"2\" isRequired>\r\n          <FormLabel>Product Type</FormLabel>\r\n          <Select\r\n            name=\"type\"\r\n            id=\"type\"\r\n            w=\"100%\"\r\n            size=\"lg\"\r\n            mt=\"4\"\r\n            onChange={updateProduct}\r\n            value={product.type || \"\"}\r\n          >\r\n            {typeArray.map((type, index) => (\r\n              <option value={type} key={index}>\r\n                {type}\r\n              </option>\r\n            ))}\r\n          </Select>\r\n        </FormControl>\r\n        <FormControl id=\"product_price\" w=\"90%\" mt=\"2\" isRequired>\r\n          <FormLabel>Product Price</FormLabel>\r\n          <Input\r\n            type=\"number\"\r\n            onChange={(e) => setProduct({ price: +e.target.value })}\r\n            value={product.price || \"\"}\r\n            name=\"price\"\r\n            size=\"lg\"\r\n          />\r\n        </FormControl>\r\n        <FormControl id=\"product_length\" w=\"90%\" mt=\"2\" isRequired>\r\n          <FormLabel>Product Length</FormLabel>\r\n          <Input\r\n            type=\"number\"\r\n            onChange={(e) => setProduct({ length: +e.target.value })}\r\n            value={product.length || \"\"}\r\n            name=\"length\"\r\n            size=\"lg\"\r\n          />\r\n        </FormControl>\r\n        <FormControl w=\"90%\" mt=\"2\" isRequired>\r\n          <FormLabel>Fabrics</FormLabel>\r\n          <Select\r\n            name=\"fabric\"\r\n            id=\"fabrics\"\r\n            w=\"100%\"\r\n            size=\"lg\"\r\n            onChange={updateProduct}\r\n            name=\"fabric\"\r\n            value={product.fabric || \"DEFAULT\"}\r\n          >\r\n            <option value=\"DEFAULT\" disabled>\r\n              Select a fabric\r\n            </option>\r\n            {fabricsArray.map((fabric, index) => (\r\n              <option value={fabric} key={index}>\r\n                {fabric}\r\n              </option>\r\n            ))}\r\n          </Select>\r\n        </FormControl>\r\n        <FormControl w=\"90%\" mt=\"2\" isRequired>\r\n          <FormLabel>Categories</FormLabel>\r\n          <Select\r\n            name=\"categoryId\"\r\n            w=\"100%\"\r\n            size=\"lg\"\r\n            mt=\"4\"\r\n            onChange={(e) => setProduct({ categoryId: +e.target.value })}\r\n            value={product.categoryId || \"DEFAULT\"}\r\n          >\r\n            <option value=\"DEFAULT\" disabled>\r\n              Select a Category\r\n            </option>\r\n            {!isLoading &&\r\n              categories.map((category) => (\r\n                <option value={category.id} key={category.id}>\r\n                  {category.name}\r\n                </option>\r\n              ))}\r\n          </Select>\r\n        </FormControl>\r\n        <FormControl id=\"product_sizes\" w=\"90%\" mt=\"2\" isRequired>\r\n          <FormLabel>Product Sizes</FormLabel>\r\n          <Box\r\n            rounded=\"md\"\r\n            bg=\"white\"\r\n            boxShadow=\"xs\"\r\n            key={product.id}\r\n            d=\"flex\"\r\n            direction=\"row\"\r\n            justifyContent=\"center\"\r\n            w=\"95%\"\r\n            flexShrink=\"0\"\r\n            mt=\"3\"\r\n          >\r\n            <Table colorScheme=\"blue\" variant=\"striped\">\r\n              <Thead>\r\n                <Tr>\r\n                  <Th>Size</Th>\r\n                  <Th>Stock</Th>\r\n                </Tr>\r\n              </Thead>\r\n              <Tbody>\r\n                <SizeProduct name=\"sizeXS\" title=\"XS\" />\r\n                <SizeProduct name=\"sizeS\" title=\"S\" />\r\n                <SizeProduct name=\"sizeM\" title=\"M\" />\r\n                <SizeProduct name=\"sizeL\" title=\"L\" />\r\n                <SizeProduct name=\"sizeXL\" title=\"XL\" />\r\n                <SizeProduct name=\"sizeXXL\" title=\"XXL\" />\r\n              </Tbody>\r\n            </Table>\r\n          </Box>\r\n        </FormControl>\r\n        {isValidationError && (\r\n          <h1 className={styles.validationError}>\r\n            *Product cod and product price field must be filled\r\n          </h1>\r\n        )}\r\n        <Button\r\n          onClick={() => setIsOpen(true)}\r\n          colorScheme=\"teal\"\r\n          variant=\"solid\"\r\n          size=\"xs\"\r\n          w=\"90%\"\r\n          padding=\"6\"\r\n          mt=\"6\"\r\n          mb=\"6\"\r\n          isLoading={isLoading}\r\n          loadingText=\"Uploading\"\r\n        >\r\n          Add Product\r\n        </Button>\r\n        <AlertDialog\r\n          isOpen={isOpen}\r\n          leastDestructiveRef={cancelRef}\r\n          onClose={() => setIsOpen(false)}\r\n        >\r\n          <AlertDialogOverlay>\r\n            <AlertDialogContent w=\"90%\" pos=\"center\">\r\n              <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\r\n                Add Product\r\n              </AlertDialogHeader>\r\n\r\n              <AlertDialogBody>\r\n                Are you sure you want to add this Product ?\r\n              </AlertDialogBody>\r\n\r\n              <AlertDialogFooter>\r\n                <Button ref={cancelRef} onClick={() => setIsOpen(false)}>\r\n                  Cancel\r\n                </Button>\r\n                <Button\r\n                  colorScheme=\"green\"\r\n                  ml={3}\r\n                  onClick={() => validateFields(addProduct)}\r\n                >\r\n                  Add\r\n                </Button>\r\n              </AlertDialogFooter>\r\n            </AlertDialogContent>\r\n          </AlertDialogOverlay>\r\n        </AlertDialog>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProductAdd;\r\n",["156","157"],"D:\\Abony Price Directory\\price-directory\\src\\pages\\ProductEditAdmin.js",["158","159","160","161","162","163","164","165","166","167","168","169","170"],"import { useState, useEffect } from \"react\";\r\nimport { useFormLocal } from \"../components/useFormLocal\";\r\nimport styles from \"./productadd.module.scss\";\r\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\"; // requires a loader\r\nimport { Carousel } from \"react-responsive-carousel\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport backIcon from \"../assets/backIcon.png\";\r\nimport { getSingleProduct, updateProductAPI } from \"../API/product\";\r\nimport {\r\n  Box,\r\n  Table,\r\n  Thead,\r\n  Tbody,\r\n  Tr,\r\n  Th,\r\n  Td,\r\n  TableCaption,\r\n} from \"@chakra-ui/react\";\r\nimport {\r\n  Input,\r\n  FormControl,\r\n  FormLabel,\r\n  Select,\r\n  Stack,\r\n  Image,\r\n  Button,\r\n  SimpleGrid,\r\n  AlertDialog,\r\n  AlertDialogBody,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogContent,\r\n  AlertDialogOverlay,\r\n} from \"@chakra-ui/react\";\r\nimport { apiRoot } from \"../config\";\r\n\r\nconst ProductAdmin = (props) => {\r\n  const [product, setProduct, updateProduct] = useFormLocal({});\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isUpdateLoading, setIsUpdateLoading] = useState(false);\r\n  const [isDeleteLoading, setIsDeleteLoading] = useState(false);\r\n\r\n  const productId = props.match.params.id;\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    const fetchData = async () => {\r\n      const productResponse = await getSingleProduct(productId);\r\n      setProduct(productResponse);\r\n      setIsLoading(false);\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  const updateProductServer = async () => {\r\n    setIsUpdateLoading(true);\r\n    const responseUpdate = await updateProductAPI(product);\r\n    console.log(responseUpdate);\r\n    setIsUpdateLoading(false);\r\n    // history.push(\"/admin/products\");\r\n  };\r\n\r\n  //component for textbox with plus button\r\n  const SizeProduct = ({ name, title }) => {\r\n    return (\r\n      <Tr>\r\n        <Td>{title}</Td>\r\n        <Td>\r\n          <Button\r\n            size=\"xs\"\r\n            colorScheme=\"red\"\r\n            onClick={() => setProduct({ [name]: --product[name] })}\r\n            mr=\"5\"\r\n          >\r\n            -\r\n          </Button>\r\n          {product[name] || 0}\r\n          <Button\r\n            ml=\"5\"\r\n            colorScheme=\"teal\"\r\n            onClick={() => setProduct({ [name]: ++product[name] })}\r\n          >\r\n            +\r\n          </Button>\r\n        </Td>\r\n      </Tr>\r\n    );\r\n  };\r\n\r\n  const deleteProduct = () => {\r\n    setIsDeleteLoading(true);\r\n\r\n    setIsDeleteLoading(false);\r\n    history.push(\"/products\");\r\n  };\r\n\r\n  const handleBackClick = () => {\r\n    history.goBack();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className={styles.header}>\r\n        <button className={styles.backButton} onClick={handleBackClick}>\r\n          <img src={backIcon} className={styles.backIcon} alt=\"back_icon\" />\r\n        </button>\r\n        <h1 className={styles.label}>Product</h1>\r\n      </div>\r\n      {isLoading ? (\r\n        <div className={styles.loaderwraper}>\r\n          <Loader\r\n            type=\"Oval\"\r\n            color=\"#0278ae\"\r\n            height={50}\r\n            width={50}\r\n            visible={isLoading}\r\n          />\r\n        </div>\r\n      ) : (\r\n        <div></div>\r\n      )}\r\n      {!isLoading && (\r\n        <>\r\n          <div className={styles.container}>\r\n            <Carousel\r\n              infiniteLoop\r\n              dynamicHeight\r\n              showThumbs={false}\r\n              showStatus={false}\r\n              className={styles.carousel}\r\n            >\r\n              {product.ProductImage &&\r\n                product.ProductImage.map((image, index) => (\r\n                  <div\r\n                    style={{ height: 300, backgroundColor: `white` }}\r\n                    key={index}\r\n                  >\r\n                    <img\r\n                      src={`${apiRoot}/product-images/min/${image.name}`}\r\n                      className={styles.image}\r\n                      alt=\"image_preview\"\r\n                    />\r\n                  </div>\r\n                ))}\r\n            </Carousel>\r\n            <FormControl id=\"product_cod\" w=\"90%\" mt=\"2\" isRequired>\r\n              <FormLabel>Product cod</FormLabel>\r\n              <Input\r\n                type=\"text\"\r\n                value={product.code}\r\n                size=\"lg\"\r\n                name=\"code\"\r\n                onChange={updateProduct}\r\n              />\r\n            </FormControl>\r\n            <FormControl id=\"product_price\" w=\"90%\" mt=\"2\" isRequired>\r\n              <FormLabel>Product Price</FormLabel>\r\n              <Input\r\n                type=\"number\"\r\n                size=\"lg\"\r\n                name=\"price\"\r\n                value={product.price}\r\n                onChange={updateProduct}\r\n              />\r\n            </FormControl>\r\n            <FormControl w=\"90%\" mt=\"2\" isRequired>\r\n              <FormLabel>Product Fabric</FormLabel>\r\n              <Input\r\n                type=\"text\"\r\n                size=\"lg\"\r\n                name=\"fabric\"\r\n                value={product.fabric || \"\"}\r\n                onChange={updateProduct}\r\n              />\r\n            </FormControl>\r\n            <FormControl id=\"product_length\" w=\"90%\" mt=\"2\" isRequired>\r\n              <FormLabel>Product Length</FormLabel>\r\n              <Input\r\n                type=\"number\"\r\n                size=\"lg\"\r\n                name=\"length\"\r\n                value={product.length || \"\"}\r\n                onChange={updateProduct}\r\n              />\r\n            </FormControl>\r\n\r\n            <FormControl id=\"product_sizes\" w=\"90%\" mt=\"2\" isRequired>\r\n              <FormLabel>Product Sizes</FormLabel>\r\n\r\n              <Box\r\n                rounded=\"md\"\r\n                bg=\"white\"\r\n                boxShadow=\"xs\"\r\n                key={product.id}\r\n                d=\"flex\"\r\n                direction=\"row\"\r\n                justifyContent=\"center\"\r\n                w=\"95%\"\r\n                flexShrink=\"0\"\r\n                mt=\"3\"\r\n              >\r\n                <Table variant=\"striped\" colorScheme=\"blue\">\r\n                  <Thead>\r\n                    <Tr>\r\n                      <Th>Size</Th>\r\n                      <Th>Stock</Th>\r\n                    </Tr>\r\n                  </Thead>\r\n                  <Tbody>\r\n                    <SizeProduct name=\"sizeXS\" title=\"XS\" />\r\n                    <SizeProduct name=\"sizeS\" title=\"S\" />\r\n                    <SizeProduct name=\"sizeM\" title=\"M\" />\r\n                    <SizeProduct name=\"sizeL\" title=\"L\" />\r\n                    <SizeProduct name=\"sizeXL\" title=\"XL\" />\r\n                    <SizeProduct name=\"sizeXXL\" title=\"XXL\" />\r\n                  </Tbody>\r\n                </Table>\r\n              </Box>\r\n            </FormControl>\r\n            <button onClick={updateProductServer} className={styles.btnPrimary}>\r\n              {isUpdateLoading ? (\r\n                <div className={styles.loader}>\r\n                  <Loader\r\n                    type=\"Oval\"\r\n                    color=\"white\"\r\n                    height={18}\r\n                    width={18}\r\n                    visible={isUpdateLoading}\r\n                  />\r\n                </div>\r\n              ) : (\r\n                <div>Update Product</div>\r\n              )}\r\n            </button>\r\n            <button onClick={deleteProduct} className={styles.btnDanger}>\r\n              {isDeleteLoading ? (\r\n                <div className={styles.loader}>\r\n                  <Loader\r\n                    type=\"Oval\"\r\n                    color=\"white\"\r\n                    height={18}\r\n                    width={18}\r\n                    visible={isDeleteLoading}\r\n                  />\r\n                </div>\r\n              ) : (\r\n                <div>Delete Product</div>\r\n              )}\r\n            </button>\r\n          </div>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProductAdmin;\r\n",["171","172"],"D:\\Abony Price Directory\\price-directory\\src\\API\\category.js",[],"D:\\Abony Price Directory\\price-directory\\src\\API\\product.js",["173"],"D:\\Abony Price Directory\\price-directory\\src\\components\\CopyItems.js",[],"D:\\Abony Price Directory\\price-directory\\src\\App.js",[],{"ruleId":"174","replacedBy":"175"},{"ruleId":"176","replacedBy":"177"},{"ruleId":"178","severity":1,"message":"179","line":29,"column":3,"nodeType":"180","messageId":"181","endLine":29,"endColumn":15},{"ruleId":"178","severity":1,"message":"182","line":31,"column":3,"nodeType":"180","messageId":"181","endLine":31,"endColumn":8},{"ruleId":"183","severity":1,"message":"184","line":110,"column":6,"nodeType":"185","endLine":110,"endColumn":8,"suggestions":"186"},{"ruleId":"178","severity":1,"message":"187","line":153,"column":7,"nodeType":"180","messageId":"181","endLine":153,"endColumn":10},{"ruleId":"178","severity":1,"message":"188","line":5,"column":8,"nodeType":"180","messageId":"181","endLine":5,"endColumn":13},{"ruleId":"178","severity":1,"message":"189","line":12,"column":3,"nodeType":"180","messageId":"181","endLine":12,"endColumn":6},{"ruleId":"178","severity":1,"message":"190","line":15,"column":8,"nodeType":"180","messageId":"181","endLine":15,"endColumn":19},{"ruleId":"178","severity":1,"message":"191","line":16,"column":10,"nodeType":"180","messageId":"181","endLine":16,"endColumn":24},{"ruleId":"192","severity":1,"message":"193","line":38,"column":21,"nodeType":"194","messageId":"195","endLine":38,"endColumn":23},{"ruleId":"183","severity":1,"message":"196","line":43,"column":6,"nodeType":"185","endLine":43,"endColumn":19,"suggestions":"197"},{"ruleId":"178","severity":1,"message":"198","line":30,"column":3,"nodeType":"180","messageId":"181","endLine":30,"endColumn":9},{"ruleId":"183","severity":1,"message":"199","line":73,"column":6,"nodeType":"185","endLine":73,"endColumn":8,"suggestions":"200"},{"ruleId":"178","severity":1,"message":"201","line":78,"column":11,"nodeType":"180","messageId":"181","endLine":78,"endColumn":25},{"ruleId":"202","severity":1,"message":"203","line":197,"column":19,"nodeType":"204","endLine":200,"endColumn":21},{"ruleId":"178","severity":1,"message":"205","line":10,"column":3,"nodeType":"180","messageId":"181","endLine":10,"endColumn":13},{"ruleId":"178","severity":1,"message":"206","line":11,"column":3,"nodeType":"180","messageId":"181","endLine":11,"endColumn":20},{"ruleId":"178","severity":1,"message":"207","line":12,"column":3,"nodeType":"180","messageId":"181","endLine":12,"endColumn":13},{"ruleId":"178","severity":1,"message":"189","line":13,"column":3,"nodeType":"180","messageId":"181","endLine":13,"endColumn":6},{"ruleId":"174","replacedBy":"208"},{"ruleId":"176","replacedBy":"209"},{"ruleId":"174","replacedBy":"210"},{"ruleId":"176","replacedBy":"211"},{"ruleId":"212","severity":1,"message":"213","line":53,"column":24,"nodeType":"214","messageId":"215","endLine":53,"endColumn":26},{"ruleId":"178","severity":1,"message":"216","line":7,"column":8,"nodeType":"180","messageId":"181","endLine":7,"endColumn":17},{"ruleId":"183","severity":1,"message":"217","line":36,"column":6,"nodeType":"185","endLine":36,"endColumn":8,"suggestions":"218"},{"ruleId":"192","severity":1,"message":"193","line":39,"column":21,"nodeType":"194","messageId":"195","endLine":39,"endColumn":23},{"ruleId":"202","severity":1,"message":"203","line":83,"column":13,"nodeType":"204","endLine":83,"endColumn":72},{"ruleId":"178","severity":1,"message":"219","line":6,"column":10,"nodeType":"180","messageId":"181","endLine":6,"endColumn":20},{"ruleId":"178","severity":1,"message":"220","line":11,"column":3,"nodeType":"180","messageId":"181","endLine":11,"endColumn":8},{"ruleId":"178","severity":1,"message":"205","line":12,"column":3,"nodeType":"180","messageId":"181","endLine":12,"endColumn":13},{"ruleId":"178","severity":1,"message":"206","line":13,"column":3,"nodeType":"180","messageId":"181","endLine":13,"endColumn":20},{"ruleId":"178","severity":1,"message":"221","line":23,"column":10,"nodeType":"180","messageId":"181","endLine":23,"endColumn":16},{"ruleId":"178","severity":1,"message":"222","line":23,"column":18,"nodeType":"180","messageId":"181","endLine":23,"endColumn":27},{"ruleId":"183","severity":1,"message":"223","line":39,"column":6,"nodeType":"185","endLine":39,"endColumn":18,"suggestions":"224"},{"ruleId":"225","severity":1,"message":"226","line":106,"column":17,"nodeType":"227","endLine":106,"endColumn":23},{"ruleId":"174","replacedBy":"228"},{"ruleId":"176","replacedBy":"229"},{"ruleId":"192","severity":1,"message":"193","line":40,"column":21,"nodeType":"194","messageId":"195","endLine":40,"endColumn":23},{"ruleId":"183","severity":1,"message":"196","line":45,"column":6,"nodeType":"185","endLine":45,"endColumn":19,"suggestions":"230"},{"ruleId":"202","severity":1,"message":"203","line":86,"column":13,"nodeType":"204","endLine":86,"endColumn":72},{"ruleId":"183","severity":1,"message":"231","line":53,"column":6,"nodeType":"185","endLine":53,"endColumn":8,"suggestions":"232"},{"ruleId":"192","severity":1,"message":"193","line":57,"column":68,"nodeType":"194","messageId":"195","endLine":57,"endColumn":70},{"ruleId":"192","severity":1,"message":"233","line":67,"column":66,"nodeType":"194","messageId":"195","endLine":67,"endColumn":68},{"ruleId":"192","severity":1,"message":"233","line":68,"column":67,"nodeType":"194","messageId":"195","endLine":68,"endColumn":69},{"ruleId":"178","severity":1,"message":"234","line":97,"column":11,"nodeType":"180","messageId":"181","endLine":97,"endColumn":19},{"ruleId":"178","severity":1,"message":"235","line":155,"column":9,"nodeType":"180","messageId":"181","endLine":155,"endColumn":21},{"ruleId":"192","severity":1,"message":"193","line":156,"column":67,"nodeType":"194","messageId":"195","endLine":156,"endColumn":69},{"ruleId":"202","severity":1,"message":"203","line":231,"column":19,"nodeType":"204","endLine":234,"endColumn":21},{"ruleId":"178","severity":1,"message":"236","line":7,"column":8,"nodeType":"180","messageId":"181","endLine":7,"endColumn":14},{"ruleId":"178","severity":1,"message":"179","line":20,"column":3,"nodeType":"180","messageId":"181","endLine":20,"endColumn":15},{"ruleId":"178","severity":1,"message":"205","line":24,"column":3,"nodeType":"180","messageId":"181","endLine":24,"endColumn":13},{"ruleId":"178","severity":1,"message":"206","line":25,"column":3,"nodeType":"180","messageId":"181","endLine":25,"endColumn":20},{"ruleId":"183","severity":1,"message":"237","line":77,"column":6,"nodeType":"185","endLine":77,"endColumn":8,"suggestions":"238"},{"ruleId":"178","severity":1,"message":"239","line":86,"column":9,"nodeType":"180","messageId":"181","endLine":86,"endColumn":19},{"ruleId":"225","severity":1,"message":"226","line":283,"column":13,"nodeType":"227","endLine":283,"endColumn":26},{"ruleId":"174","replacedBy":"240"},{"ruleId":"176","replacedBy":"241"},{"ruleId":"178","severity":1,"message":"242","line":6,"column":16,"nodeType":"180","messageId":"181","endLine":6,"endColumn":22},{"ruleId":"178","severity":1,"message":"179","line":20,"column":3,"nodeType":"180","messageId":"181","endLine":20,"endColumn":15},{"ruleId":"178","severity":1,"message":"243","line":26,"column":3,"nodeType":"180","messageId":"181","endLine":26,"endColumn":9},{"ruleId":"178","severity":1,"message":"244","line":27,"column":3,"nodeType":"180","messageId":"181","endLine":27,"endColumn":8},{"ruleId":"178","severity":1,"message":"245","line":28,"column":3,"nodeType":"180","messageId":"181","endLine":28,"endColumn":8},{"ruleId":"178","severity":1,"message":"246","line":30,"column":3,"nodeType":"180","messageId":"181","endLine":30,"endColumn":13},{"ruleId":"178","severity":1,"message":"247","line":31,"column":3,"nodeType":"180","messageId":"181","endLine":31,"endColumn":14},{"ruleId":"178","severity":1,"message":"248","line":32,"column":3,"nodeType":"180","messageId":"181","endLine":32,"endColumn":18},{"ruleId":"178","severity":1,"message":"249","line":33,"column":3,"nodeType":"180","messageId":"181","endLine":33,"endColumn":20},{"ruleId":"178","severity":1,"message":"250","line":34,"column":3,"nodeType":"180","messageId":"181","endLine":34,"endColumn":20},{"ruleId":"178","severity":1,"message":"251","line":35,"column":3,"nodeType":"180","messageId":"181","endLine":35,"endColumn":21},{"ruleId":"178","severity":1,"message":"252","line":36,"column":3,"nodeType":"180","messageId":"181","endLine":36,"endColumn":21},{"ruleId":"183","severity":1,"message":"253","line":57,"column":6,"nodeType":"185","endLine":57,"endColumn":8,"suggestions":"254"},{"ruleId":"174","replacedBy":"255"},{"ruleId":"176","replacedBy":"256"},{"ruleId":"212","severity":1,"message":"213","line":61,"column":29,"nodeType":"214","messageId":"215","endLine":61,"endColumn":31},"no-native-reassign",["257"],"no-negated-in-lhs",["258"],"no-unused-vars","'TableCaption' is defined but never used.","Identifier","unusedVar","'Badge' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'productId'. Either include it or remove the dependency array.","ArrayExpression",["259"],"'arr' is assigned a value but never used.","'Admin' is defined but never used.","'Box' is defined but never used.","'Placeholder' is defined but never used.","'ChakraProvider' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'doSearch'. Either include it or remove the dependency array.",["260"],"'border' is defined but never used.","React Hook useEffect has missing dependencies: 'orderId' and 'setOrder'. Either include them or remove the dependency array.",["261"],"'updateResponse' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'InputGroup' is defined but never used.","'InputRightElement' is defined but never used.","'IconButton' is defined but never used.",["257"],["258"],["257"],["258"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'TabHeader' is defined but never used.","React Hook useEffect has a missing dependency: 'categoryId'. Either include it or remove the dependency array.",["262"],"'SearchIcon' is defined but never used.","'Input' is defined but never used.","'filter' is assigned a value but never used.","'setFilter' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'handleFilter'. Either include it or remove the dependency array.",["263"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",["257"],["258"],["264"],"React Hook useEffect has a missing dependency: 'setOrder'. Either include it or remove the dependency array.",["265"],"Expected '!==' and instead saw '!='.","'response' is assigned a value but never used.","'ProductImage' is assigned a value but never used.","'Loader' is defined but never used.","React Hook useEffect has a missing dependency: 'setProduct'. Either include it or remove the dependency array.",["266"],"'imageNames' is assigned a value but never used.",["257"],["258"],"'uuidv4' is defined but never used.","'Select' is defined but never used.","'Stack' is defined but never used.","'Image' is defined but never used.","'SimpleGrid' is defined but never used.","'AlertDialog' is defined but never used.","'AlertDialogBody' is defined but never used.","'AlertDialogFooter' is defined but never used.","'AlertDialogHeader' is defined but never used.","'AlertDialogContent' is defined but never used.","'AlertDialogOverlay' is defined but never used.","React Hook useEffect has missing dependencies: 'productId' and 'setProduct'. Either include them or remove the dependency array.",["267"],["257"],["258"],"no-global-assign","no-unsafe-negation",{"desc":"268","fix":"269"},{"desc":"270","fix":"271"},{"desc":"272","fix":"273"},{"desc":"274","fix":"275"},{"desc":"276","fix":"277"},{"desc":"270","fix":"278"},{"desc":"279","fix":"280"},{"desc":"281","fix":"282"},{"desc":"283","fix":"284"},"Update the dependencies array to be: [productId]",{"range":"285","text":"286"},"Update the dependencies array to be: [doSearch, searchValue]",{"range":"287","text":"288"},"Update the dependencies array to be: [orderId, setOrder]",{"range":"289","text":"290"},"Update the dependencies array to be: [categoryId]",{"range":"291","text":"292"},"Update the dependencies array to be: [categories, handleFilter]",{"range":"293","text":"294"},{"range":"295","text":"288"},"Update the dependencies array to be: [setOrder]",{"range":"296","text":"297"},"Update the dependencies array to be: [setProduct]",{"range":"298","text":"299"},"Update the dependencies array to be: [productId, setProduct]",{"range":"300","text":"301"},[3302,3304],"[productId]",[1383,1396],"[doSearch, searchValue]",[2171,2173],"[orderId, setOrder]",[1288,1290],"[categoryId]",[1175,1187],"[categories, handleFilter]",[1342,1355],[1587,1589],"[setOrder]",[2114,2116],"[setProduct]",[1643,1645],"[productId, setProduct]"]