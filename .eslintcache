[{"D:\\Abony Price Directory\\price-directory\\src\\index.js":"1","D:\\Abony Price Directory\\price-directory\\src\\pages\\ProductDetailed.js":"2","D:\\Abony Price Directory\\price-directory\\src\\pages\\Home.js":"3","D:\\Abony Price Directory\\price-directory\\src\\pages\\orders.js":"4","D:\\Abony Price Directory\\price-directory\\src\\pages\\orderDetailed.js":"5","D:\\Abony Price Directory\\price-directory\\src\\pages\\addCategoryAdmin.js":"6","D:\\Abony Price Directory\\price-directory\\src\\config.js":"7","D:\\Abony Price Directory\\price-directory\\src\\components\\tabHeader.js":"8","D:\\Abony Price Directory\\price-directory\\src\\components\\useFormLocal.js":"9","D:\\Abony Price Directory\\price-directory\\src\\API\\order.js":"10","D:\\Abony Price Directory\\price-directory\\src\\pages\\categoryProducts.js":"11","D:\\Abony Price Directory\\price-directory\\src\\pages\\categoriesAdmin.js":"12","D:\\Abony Price Directory\\price-directory\\src\\pages\\Products.js":"13","D:\\Abony Price Directory\\price-directory\\src\\pages\\addOrder.js":"14","D:\\Abony Price Directory\\price-directory\\src\\components\\TableSize.js":"15","D:\\Abony Price Directory\\price-directory\\src\\pages\\productAdd.js":"16","D:\\Abony Price Directory\\price-directory\\src\\pages\\ProductEditAdmin.js":"17","D:\\Abony Price Directory\\price-directory\\src\\API\\category.js":"18"},{"size":547,"mtime":1608618634216,"results":"19","hashOfConfig":"20"},{"size":9680,"mtime":1611410825080,"results":"21","hashOfConfig":"20"},{"size":1021,"mtime":1610705155321,"results":"22","hashOfConfig":"20"},{"size":4860,"mtime":1611211203889,"results":"23","hashOfConfig":"20"},{"size":12889,"mtime":1610970671757,"results":"24","hashOfConfig":"20"},{"size":2751,"mtime":1611207985246,"results":"25","hashOfConfig":"20"},{"size":50,"mtime":1611039551671,"results":"26","hashOfConfig":"20"},{"size":871,"mtime":1610705348767,"results":"27","hashOfConfig":"20"},{"size":560,"mtime":1610805873643,"results":"28","hashOfConfig":"20"},{"size":1564,"mtime":1611039588064,"results":"29","hashOfConfig":"20"},{"size":4902,"mtime":1611210961918,"results":"30","hashOfConfig":"20"},{"size":3436,"mtime":1611208745432,"results":"31","hashOfConfig":"20"},{"size":5360,"mtime":1611208777446,"results":"32","hashOfConfig":"20"},{"size":11721,"mtime":1611408779444,"results":"33","hashOfConfig":"20"},{"size":1216,"mtime":1608012459744,"results":"34","hashOfConfig":"20"},{"size":12016,"mtime":1611409429111,"results":"35","hashOfConfig":"20"},{"size":7942,"mtime":1611402500720,"results":"36","hashOfConfig":"20"},{"size":415,"mtime":1611039578970,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"6qx1r0",{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"50"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"50"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"56"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"40"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Abony Price Directory\\price-directory\\src\\index.js",[],["82","83"],"D:\\Abony Price Directory\\price-directory\\src\\pages\\ProductDetailed.js",["84","85","86"],"D:\\Abony Price Directory\\price-directory\\src\\pages\\Home.js",["87"],"D:\\Abony Price Directory\\price-directory\\src\\pages\\orders.js",["88","89","90","91","92"],"D:\\Abony Price Directory\\price-directory\\src\\pages\\orderDetailed.js",["93","94"],"import { React, useRef, useState, useEffect } from \"react\";\r\nimport styles from \"./addOrder.module.scss\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport backIcon from \"../assets/backIcon.png\";\r\nimport { useFormLocal } from \"../components/useFormLocal\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\nimport {\r\n  getSingleOrderAPI,\r\n  updateOrderAPI,\r\n  deleteOrderAPI,\r\n} from \"../API/order\";\r\nimport {\r\n  Input,\r\n  FormControl,\r\n  FormLabel,\r\n  Textarea,\r\n  Stack,\r\n  Radio,\r\n  RadioGroup,\r\n  Button,\r\n  useToast,\r\n  AlertDialog,\r\n  AlertDialogBody,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogContent,\r\n  AlertDialogOverlay,\r\n} from \"@chakra-ui/react\";\r\n\r\nconst OrderDetailed = (props) => {\r\n  const [isUpdateOpen, setIsUpdateOpen] = useState(false); //setting state for update btn modal\r\n  const [isDeleteOpen, setIsDeleteOpen] = useState(false); //setting state for delete btn modal\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [order, setOrder, updateOrder] = useFormLocal([]);\r\n  const [orderTotal, setOrderTotal] = useState(0);\r\n\r\n  const [isBtnLoading, setIsBtnLoading] = useState(false);\r\n\r\n  const cancelRef = useRef();\r\n  const history = useHistory();\r\n  const orderId = props.match.params.id;\r\n  const toast = useToast();\r\n  const updateModal = {\r\n    header: \"Update Order\",\r\n    body: \"Are you sure you want to update this order ?\",\r\n    button: \"Update\",\r\n    btnColor: \"green\",\r\n  };\r\n  const deleteModal = {\r\n    header: \"Delete Order\",\r\n    body: \"Are you sure you want to delete this order ?\",\r\n    button: \"Delete\",\r\n    btnColor: \"red\",\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setIsLoading(true);\r\n      const orderResponse = await getSingleOrderAPI(orderId);\r\n      console.log(orderResponse);\r\n      setOrder(orderResponse.data);\r\n      const amountFull = orderResponse.data.orderproducts.reduce(\r\n        (acc, curr) => acc + curr.price,\r\n        0\r\n      );\r\n      setOrderTotal(amountFull);\r\n      setIsLoading(false);\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  const handleUpdateOrder = async () => {\r\n    setIsUpdateOpen(false);\r\n    setIsBtnLoading(true);\r\n    const updateResponse = await updateOrderAPI(\r\n      {\r\n        status: order.status,\r\n        tracking_id: order.tracking_id,\r\n        order_note: order.order_note,\r\n      },\r\n      orderId\r\n    );\r\n    setIsBtnLoading(false);\r\n    toast({\r\n      title: \"Order updated.\",\r\n      description: \"Order updated successfully.\",\r\n      status: \"success\",\r\n      duration: 2000,\r\n      isClosable: true,\r\n      position: \"bottom\",\r\n    });\r\n  };\r\n\r\n  const handlDeleteOrder = async () => {\r\n    await deleteOrderAPI(orderId);\r\n    history.goBack();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className={styles.header}>\r\n        <button className={styles.backButton} onClick={() => history.goBack()}>\r\n          <img src={backIcon} className={styles.backIcon} alt=\"back_icon\" />\r\n        </button>\r\n        <h1 className={styles.label}>Order Detailed</h1>\r\n      </div>\r\n      {isLoading ? (\r\n        <div className={styles.loaderwraper}>\r\n          <Loader\r\n            type=\"Oval\"\r\n            color=\"#0278ae\"\r\n            height={50}\r\n            width={50}\r\n            visible={isLoading}\r\n          />\r\n        </div>\r\n      ) : (\r\n        <div></div>\r\n      )}\r\n      <div className={styles.container}>\r\n        {!isLoading && (\r\n          <>\r\n            <FormControl w=\"90%\" mt=\"2\">\r\n              <FormLabel>Order Full Amount</FormLabel>\r\n              <Input\r\n                type=\"text\"\r\n                size=\"lg\"\r\n                name=\"order\"\r\n                value={`â‚¹${orderTotal}`}\r\n                variant=\"filled\"\r\n                disabled\r\n              />\r\n            </FormControl>\r\n            <FormControl id=\"date\" w=\"90%\" mt=\"2\">\r\n              <FormLabel>Order Date</FormLabel>\r\n              {order.date && (\r\n                <Input\r\n                  type=\"text\"\r\n                  size=\"lg\"\r\n                  name=\"order\"\r\n                  value={new Date(order.date).toLocaleDateString()}\r\n                  variant=\"filled\"\r\n                  disabled\r\n                />\r\n              )}\r\n            </FormControl>\r\n            <FormControl id=\"customer_name\" w=\"90%\" mt=\"2\" isRequired>\r\n              <FormLabel>Order ID:</FormLabel>\r\n              <Input\r\n                type=\"text\"\r\n                size=\"lg\"\r\n                name=\"customer_name\"\r\n                value={order.id}\r\n                variant=\"filled\"\r\n                disabled\r\n              />\r\n            </FormControl>\r\n            <FormControl id=\"customer_name\" w=\"90%\" mt=\"2\" isRequired>\r\n              <FormLabel>Customer Name :</FormLabel>\r\n              <Input\r\n                type=\"text\"\r\n                size=\"lg\"\r\n                name=\"customer_name\"\r\n                value={order.name}\r\n                variant=\"filled\"\r\n                disabled\r\n              />\r\n            </FormControl>\r\n            <FormControl id=\"customer_address\" w=\"90%\" mt=\"2\" isRequired>\r\n              <FormLabel>Address :</FormLabel>\r\n              <Textarea\r\n                type=\"text\"\r\n                size=\"lg\"\r\n                rows=\"4\"\r\n                name=\"customer_address\"\r\n                value={order.address}\r\n                variant=\"filled\"\r\n                disabled\r\n              />\r\n            </FormControl>\r\n            <h1>Products</h1>\r\n            {order.orderproducts &&\r\n              order.orderproducts.map((product) => (\r\n                <div key={product.id} style={{ width: \"90%\" }}>\r\n                  <FormControl id=\"product_cod\" w=\"90%\" mt=\"2\" isRequired>\r\n                    <FormLabel>Product Code:</FormLabel>\r\n                    <Input\r\n                      type=\"text\"\r\n                      size=\"lg\"\r\n                      name=\"product_cod\"\r\n                      variant=\"filled\"\r\n                      value={product.code}\r\n                      disabled\r\n                    />\r\n                  </FormControl>\r\n                  <Stack direction=\"row\">\r\n                    <FormControl id=\"product_price\" w=\"90%\" mt=\"2\" isRequired>\r\n                      <FormLabel>Product Price :</FormLabel>\r\n                      <Input\r\n                        type=\"number\"\r\n                        size=\"lg\"\r\n                        name=\"product_price\"\r\n                        variant=\"filled\"\r\n                        value={product.price}\r\n                        disabled\r\n                      />\r\n                    </FormControl>\r\n                    <FormControl id=\"product_size\" w=\"90%\" mt=\"2\" isRequired>\r\n                      <FormLabel>Product Size :</FormLabel>\r\n                      <Input\r\n                        type=\"text\"\r\n                        size=\"lg\"\r\n                        name=\"product_size\"\r\n                        variant=\"filled\"\r\n                        value={product.size}\r\n                        disabled\r\n                      />\r\n                    </FormControl>\r\n                  </Stack>\r\n                </div>\r\n              ))}\r\n            <FormControl id=\"payment_method\" w=\"90%\" mt=\"2\" isRequired>\r\n              <FormLabel>Payment Method :</FormLabel>\r\n              <RadioGroup\r\n                disabled\r\n                value={order.payment_method}\r\n                name=\"payement_method\"\r\n              >\r\n                <Stack direction=\"row\">\r\n                  <Radio value=\"GPAY\">Gpay PhonePe</Radio>\r\n                  <Radio value=\"ACCOUNT\">Account Transfer</Radio>\r\n                  <Radio value=\"COD\">COD</Radio>\r\n                </Stack>\r\n              </RadioGroup>\r\n            </FormControl>\r\n\r\n            <FormControl id=\"trasfer_details\" w=\"90%\" mt=\"2\" isRequired>\r\n              <FormLabel>Transfer Details :</FormLabel>\r\n              <Textarea\r\n                type=\"text\"\r\n                size=\"lg\"\r\n                rows=\"2\"\r\n                name=\"transfer_details\"\r\n                variant=\"filled\"\r\n                value={order.transfer_details || \"\"}\r\n                disabled\r\n              />\r\n            </FormControl>\r\n\r\n            <FormControl id=\"order_status\" w=\"90%\" mt=\"2\" isRequired>\r\n              <FormLabel>Order Status :</FormLabel>\r\n              <RadioGroup value={order.status}>\r\n                <Stack direction=\"row\">\r\n                  <Radio value=\"ACCEPTED\" onChange={updateOrder} name=\"status\">\r\n                    Accepted\r\n                  </Radio>\r\n                  <Radio\r\n                    value=\"DISPATCHED\"\r\n                    onChange={updateOrder}\r\n                    name=\"status\"\r\n                  >\r\n                    Dispatched\r\n                  </Radio>\r\n                  <Radio value=\"DELIVERED\" onChange={updateOrder} name=\"status\">\r\n                    Delivered\r\n                  </Radio>\r\n                </Stack>\r\n              </RadioGroup>\r\n            </FormControl>\r\n            <FormControl id=\"tracking_id\" w=\"90%\" mt=\"2\" isRequired>\r\n              <FormLabel>Tracking Id :</FormLabel>\r\n              <Input\r\n                type=\"text\"\r\n                size=\"lg\"\r\n                name=\"tracking_id\"\r\n                value={order.tracking_id || \"\"}\r\n                onChange={updateOrder}\r\n              />\r\n            </FormControl>\r\n            <FormControl id=\"date\" w=\"90%\" mt=\"2\">\r\n              <FormLabel>Order Note</FormLabel>\r\n\r\n              <Input\r\n                type=\"text\"\r\n                size=\"lg\"\r\n                name=\"order_note\"\r\n                value={order.order_note || \"\"}\r\n                onChange={updateOrder}\r\n              />\r\n            </FormControl>\r\n            <Button\r\n              colorScheme=\"teal\"\r\n              variant=\"solid\"\r\n              size=\"xs\"\r\n              w=\"90%\"\r\n              padding=\"6\"\r\n              mt=\"6\"\r\n              isLoading={isBtnLoading}\r\n              loadingText=\"Updating\"\r\n              onClick={() => setIsUpdateOpen(true)}\r\n            >\r\n              Update Order\r\n            </Button>\r\n            <Button\r\n              colorScheme=\"red\"\r\n              variant=\"solid\"\r\n              size=\"xs\"\r\n              w=\"90%\"\r\n              padding=\"6\"\r\n              mt=\"3\"\r\n              mb=\"6\"\r\n              onClick={() => setIsDeleteOpen(true)}\r\n            >\r\n              Delete Order\r\n            </Button>\r\n            {/* alert dialog for update */}\r\n            <AlertDialog\r\n              isOpen={isUpdateOpen}\r\n              leastDestructiveRef={cancelRef}\r\n              onClose={() => isUpdateOpen(false)}\r\n            >\r\n              <AlertDialogOverlay>\r\n                <AlertDialogContent w=\"90%\" pos=\"center\">\r\n                  <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\r\n                    {updateModal.header}\r\n                  </AlertDialogHeader>\r\n\r\n                  <AlertDialogBody>{updateModal.body}</AlertDialogBody>\r\n\r\n                  <AlertDialogFooter>\r\n                    <Button\r\n                      ref={cancelRef}\r\n                      onClick={() => setIsUpdateOpen(false)}\r\n                    >\r\n                      Cancel\r\n                    </Button>\r\n                    <Button\r\n                      colorScheme={updateModal.btnColor}\r\n                      ml={3}\r\n                      onClick={handleUpdateOrder}\r\n                    >\r\n                      Update\r\n                    </Button>\r\n                  </AlertDialogFooter>\r\n                </AlertDialogContent>\r\n              </AlertDialogOverlay>\r\n            </AlertDialog>\r\n            {/* alert dialog for delete */}\r\n            <AlertDialog\r\n              isOpen={isDeleteOpen}\r\n              leastDestructiveRef={cancelRef}\r\n              onClose={() => setIsDeleteOpen(false)}\r\n            >\r\n              <AlertDialogOverlay>\r\n                <AlertDialogContent w=\"90%\" pos=\"center\">\r\n                  <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\r\n                    {deleteModal.header}\r\n                  </AlertDialogHeader>\r\n\r\n                  <AlertDialogBody>{deleteModal.body}</AlertDialogBody>\r\n\r\n                  <AlertDialogFooter>\r\n                    <Button\r\n                      ref={cancelRef}\r\n                      onClick={() => setIsDeleteOpen(false)}\r\n                    >\r\n                      Cancel\r\n                    </Button>\r\n                    <Button\r\n                      colorScheme={deleteModal.btnColor}\r\n                      ml={3}\r\n                      onClick={handlDeleteOrder}\r\n                    >\r\n                      Delete\r\n                    </Button>\r\n                  </AlertDialogFooter>\r\n                </AlertDialogContent>\r\n              </AlertDialogOverlay>\r\n            </AlertDialog>\r\n          </>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default OrderDetailed;\r\n",["95","96"],"D:\\Abony Price Directory\\price-directory\\src\\pages\\addCategoryAdmin.js",["97","98","99","100"],"import { useState } from \"react\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport backIcon from \"../assets/backIcon.png\";\r\nimport styles from \"./productadd.module.scss\";\r\nimport { addcategoriesAPI } from \"../API/category\";\r\nimport {\r\n  Input,\r\n  InputGroup,\r\n  InputRightElement,\r\n  IconButton,\r\n  Box,\r\n  Select,\r\n  FormControl,\r\n  FormLabel,\r\n} from \"@chakra-ui/react\";\r\n\r\nconst AddCategory = () => {\r\n  const [category, setCategory] = useState(\"\");\r\n  const [parentCategory, setParentCategory] = useState(\"Top\");\r\n  const history = useHistory();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const handleAddCategory = async () => {\r\n    setIsLoading(true);\r\n    const responseCategory = await addcategoriesAPI({\r\n      name: category,\r\n      type: parentCategory,\r\n    });\r\n    console.log(responseCategory);\r\n    setIsLoading(false);\r\n    history.push(\"/admin/categories\");\r\n  };\r\n\r\n  const handleParentCategoryClick = (val) => {\r\n    setParentCategory(val);\r\n  };\r\n\r\n  const handleBackClick = () => {\r\n    history.goBack();\r\n  };\r\n  return (\r\n    <>\r\n      <div className={styles.header}>\r\n        <button className={styles.backButton} onClick={handleBackClick}>\r\n          <img src={backIcon} className={styles.backIcon} alt=\"back_icon\" />\r\n        </button>\r\n        <h1 className={styles.label}>Add Category</h1>\r\n      </div>\r\n      <div className={styles.container}>\r\n        <FormControl w=\"90%\" mt=\"2\" isRequired>\r\n          <FormLabel>Parent Category</FormLabel>\r\n          <Select\r\n            name=\"parent_categories\"\r\n            id=\"parent_categories\"\r\n            w=\"100%\"\r\n            size=\"lg\"\r\n            onChange={(e) => handleParentCategoryClick(e.target.value)}\r\n          >\r\n            <option value=\"Top\">Top</option>\r\n            <option value=\"Pant\">Pant</option>\r\n          </Select>\r\n        </FormControl>\r\n        <FormControl w=\"90%\" mt=\"2\" isRequired>\r\n          <FormLabel>Category Name</FormLabel>\r\n          <Input\r\n            type=\"text\"\r\n            size=\"lg\"\r\n            onChange={(e) => setCategory(e.target.value)}\r\n          />\r\n        </FormControl>\r\n        <button onClick={handleAddCategory} className={styles.btnPrimary}>\r\n          {isLoading ? (\r\n            <div className={styles.loader}>\r\n              <Loader\r\n                type=\"Oval\"\r\n                color=\"white\"\r\n                height={18}\r\n                width={18}\r\n                visible={isLoading}\r\n              />\r\n            </div>\r\n          ) : (\r\n            <div>Add Category</div>\r\n          )}\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddCategory;\r\n","D:\\Abony Price Directory\\price-directory\\src\\config.js",[],["101","102"],"D:\\Abony Price Directory\\price-directory\\src\\components\\tabHeader.js",[],"D:\\Abony Price Directory\\price-directory\\src\\components\\useFormLocal.js",[],"D:\\Abony Price Directory\\price-directory\\src\\API\\order.js",["103"],"D:\\Abony Price Directory\\price-directory\\src\\pages\\categoryProducts.js",["104","105","106","107"],"D:\\Abony Price Directory\\price-directory\\src\\pages\\categoriesAdmin.js",["108","109","110","111","112","113","114","115"],"import { useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styles from \"./products.module.scss\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport { SearchIcon, ArrowBackIcon } from \"@chakra-ui/icons\";\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\nimport TabHeader from \"../components/tabHeader\";\r\nimport { getcategoriesAPI } from \"../API/category\";\r\nimport {\r\n  Input,\r\n  InputGroup,\r\n  InputRightElement,\r\n  IconButton,\r\n  Box,\r\n  Select,\r\n} from \"@chakra-ui/react\";\r\n\r\nconst CategoriesAdmin = () => {\r\n  const [isLoading, setIsLoading] = useState();\r\n  const [categories, setCategories] = useState([]);\r\n  const [filtered, setFiltered] = useState([]);\r\n  const [filter, setFilter] = useState(\"\");\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const fetchCategories = async () => {\r\n      setIsLoading(true);\r\n      const categoriesResponse = await getcategoriesAPI();\r\n      setCategories(categoriesResponse.data);\r\n      setIsLoading(false);\r\n    };\r\n\r\n    fetchCategories();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    handleFilter(\"Top\");\r\n  }, [categories]);\r\n  const handleFilter = (cat) => {\r\n    setFiltered(categories.filter((category) => category.type === cat));\r\n    console.log(cat);\r\n    console.log(\"nice\", filtered);\r\n  };\r\n\r\n  const handleAddCategory = () => {\r\n    history.push(\"/admin/add_category\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className={styles.header}>\r\n        <IconButton\r\n          borderRadius=\"full\"\r\n          colorScheme=\"blue\"\r\n          ml=\"4\"\r\n          mt=\"2\"\r\n          alignSelf=\"flex-start\"\r\n          icon={<ArrowBackIcon color=\"white\" />}\r\n          onClick={() => history.push(\"/\")}\r\n        />\r\n\r\n        <TabHeader selected=\"categories\" />\r\n      </div>\r\n      {isLoading ? (\r\n        <div className={styles.loaderwraper}>\r\n          <Loader\r\n            type=\"Oval\"\r\n            color=\"#0278ae\"\r\n            height={50}\r\n            width={50}\r\n            visible={isLoading}\r\n          />\r\n        </div>\r\n      ) : (\r\n        <div></div>\r\n      )}\r\n      <div className={styles.container}>\r\n        <Select\r\n          name=\"parent_categories\"\r\n          id=\"parent_categories\"\r\n          size=\"lg\"\r\n          w=\"95%\"\r\n          onChange={(e) => handleFilter(e.target.value)}\r\n        >\r\n          <option value=\"Top\">Top</option>\r\n          <option value=\"Pant\">Pant</option>\r\n        </Select>\r\n        {!isLoading &&\r\n          filtered.map((category) => (\r\n            <Link\r\n              to={`/admin/category_products/${category.id}`}\r\n              key={category.id}\r\n              className={styles.link}\r\n            >\r\n              <Box\r\n                rounded=\"md\"\r\n                bg=\"white\"\r\n                boxShadow=\"xs\"\r\n                justifyContent=\"center\"\r\n                w=\"95%\"\r\n                flexShrink=\"0\"\r\n                padding=\"3\"\r\n                mt=\"3\"\r\n                height=\"auto\"\r\n                mt=\"2\"\r\n                key={category.id}\r\n              >\r\n                <h1 style={{ fontSize: `22px`, padding: `13px` }}>\r\n                  {category.name}\r\n                </h1>\r\n              </Box>\r\n            </Link>\r\n          ))}\r\n        <button onClick={handleAddCategory} className={styles.btnFloat}>\r\n          +\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CategoriesAdmin;\r\n","D:\\Abony Price Directory\\price-directory\\src\\pages\\Products.js",["116","117"],"import { useEffect, useState } from \"react\";\r\nimport styles from \"./products.module.scss\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport TabHeader from \"../components/tabHeader\";\r\nimport { getProductAPI, searchProductAPI } from \"../API/product\";\r\nimport { apiRoot } from \"../config\";\r\nimport {\r\n  Input,\r\n  InputGroup,\r\n  InputRightElement,\r\n  IconButton,\r\n  Box,\r\n} from \"@chakra-ui/react\";\r\nimport { SearchIcon, ArrowBackIcon } from \"@chakra-ui/icons\";\r\nimport Placeholder from \"../assets/placeholder.png\";\r\n\r\nconst Products = () => {\r\n  const [products, setProducts] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [filteredProducts, setFilteredProducts] = useState([]);\r\n\r\n  const [searchValue, setSearchValue] = useState(\"\");\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setIsLoading(true);\r\n      const productsResponse = await getProductAPI();\r\n      setProducts(productsResponse);\r\n\r\n      setIsLoading(false);\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (searchValue == \"\") {\r\n      setFilteredProducts([]);\r\n    }\r\n  }, [searchValue]);\r\n  const doSearch = async () => {\r\n    const searchResponse = await searchProductAPI(searchValue);\r\n    setFilteredProducts(searchResponse);\r\n  };\r\n\r\n  const StockStatus = (data) => {\r\n    const { sizeXS, sizeS, sizeM, sizeL, sizeXL, sizeXXL } = data.data;\r\n    const totalStock = [sizeXS, sizeS, sizeM, sizeL, sizeXL, sizeXXL];\r\n    if (totalStock.some((s) => s > 0)) {\r\n      return <h1 className={styles.InStock}>In Stock</h1>;\r\n    } else return <h1 className={styles.OutOfStock}>Out Of Stock </h1>;\r\n  };\r\n\r\n  const ProductCard = ({ product }) => {\r\n    return (\r\n      <Link\r\n        to={`/product_detailed/${product.id}`}\r\n        key={product.id}\r\n        className={styles.link}\r\n      >\r\n        <Box\r\n          rounded=\"md\"\r\n          bg=\"white\"\r\n          boxShadow=\"xs\"\r\n          key={product.id}\r\n          d=\"flex\"\r\n          direction=\"row\"\r\n          justifyContent=\"center\"\r\n          w=\"95%\"\r\n          flexShrink=\"0\"\r\n          mt=\"3\"\r\n          height=\"115px\"\r\n        >\r\n          {product.productimages.length > 0 ? (\r\n            <img\r\n              src={`${apiRoot}/product-images/min/${product.productimages[0].name}`}\r\n              alt=\"product_image`\"\r\n              className={styles.thumbnailImage}\r\n            />\r\n          ) : (\r\n            <img src={Placeholder} className={styles.thumbnailImage} />\r\n          )}\r\n          <div className={styles.details}>\r\n            <h1 className={styles.cod}>{product.code}</h1>\r\n            <h1 className={styles.price}>{`â‚¹${product.price}`}</h1>\r\n            <StockStatus data={product} />\r\n          </div>\r\n        </Box>{\" \"}\r\n      </Link>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className={styles.header}>\r\n        <IconButton\r\n          borderRadius=\"full\"\r\n          colorScheme=\"blue\"\r\n          ml=\"4\"\r\n          mt=\"2\"\r\n          alignSelf=\"flex-start\"\r\n          icon={<ArrowBackIcon color=\"white\" />}\r\n          onClick={() => history.push(\"/\")}\r\n        />\r\n        {/* <input\r\n          type=\"number\"\r\n          placeholder=\"Search cod here\"\r\n          className={styles.search}\r\n          value={searchValue}\r\n          onChange={(e) => setSearchValue(e.target.value)}\r\n        />\r\n        <button className={styles.btnHome} onClick={doSearch}>\r\n          Search\r\n        </button> */}\r\n\r\n        <TabHeader selected=\"products\" />\r\n        <InputGroup\r\n          w=\"90%\"\r\n          mb=\"3\"\r\n          mt=\"2\"\r\n          size=\"lg\"\r\n          backgroundColor=\"white\"\r\n          borderRadius=\"6px\"\r\n        >\r\n          <InputRightElement\r\n            children={\r\n              <IconButton\r\n                backgroundColor=\"white\"\r\n                borderRadius=\"30px\"\r\n                onClick={doSearch}\r\n                icon={<SearchIcon />}\r\n              />\r\n            }\r\n          />\r\n          <Input\r\n            type=\"number\"\r\n            placeholder=\"search in this store\"\r\n            borderRadius=\"6px\"\r\n            borderColor=\"white\"\r\n            onChange={(e) => setSearchValue(e.target.value)}\r\n          />\r\n        </InputGroup>\r\n      </div>\r\n      {isLoading ? (\r\n        <div className={styles.loaderwraper}>\r\n          <Loader\r\n            type=\"Oval\"\r\n            color=\"#0278ae\"\r\n            height={50}\r\n            width={50}\r\n            visible={isLoading}\r\n          />\r\n        </div>\r\n      ) : (\r\n        <div></div>\r\n      )}\r\n      <div className={styles.container}>\r\n        {searchValue.length < 1 ? (\r\n          <>\r\n            {products.map((product) => (\r\n              <ProductCard product={product} key={product.id} />\r\n            ))}\r\n          </>\r\n        ) : (\r\n          <>\r\n            {filteredProducts.map((product) => (\r\n              <ProductCard product={product} key={product.id} />\r\n            ))}\r\n          </>\r\n        )}\r\n      </div>\r\n      <div style={{ marginTop: `20px` }} />\r\n      <button\r\n        onClick={() => history.push(\"/admin/product_add\")}\r\n        className={styles.btnFloat}\r\n      >\r\n        +\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Products;\r\n","D:\\Abony Price Directory\\price-directory\\src\\pages\\addOrder.js",["118","119","120","121","122"],"import { React, useRef, useState, useEffect } from \"react\";\r\nimport styles from \"./addOrder.module.scss\";\r\nimport imageCompression from \"browser-image-compression\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport backIcon from \"../assets/backIcon.png\";\r\nimport { useFormLocal } from \"../components/useFormLocal\";\r\nimport DatePicker from \"react-date-picker\";\r\n\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { CloseIcon } from \"@chakra-ui/icons\";\r\n\r\nimport {\r\n  Box,\r\n  InputGroup,\r\n  InputLeftAddon,\r\n  Input,\r\n  FormControl,\r\n  FormLabel,\r\n  Textarea,\r\n  Stack,\r\n  Radio,\r\n  RadioGroup,\r\n  Button,\r\n  IconButton,\r\n  Alert,\r\n  AlertIcon,\r\n  AlertTitle,\r\n  AlertDialog,\r\n  AlertDialogBody,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogContent,\r\n  AlertDialogOverlay,\r\n} from \"@chakra-ui/react\";\r\nimport { addOrderAPI, uploadOrderImageAPI } from \"../API/order\";\r\n\r\nconst AddOrder = () => {\r\n  const [paymentMethod, setPaymentMethod] = useState(\"GPAY\");\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [order, setOrder, updateOrder] = useFormLocal([]);\r\n  const [orderProducts, setOrderProducts] = useState([\r\n    { code: \"\", image: uuidv4(), price: 0, size: \"\" },\r\n  ]);\r\n  const [isValidationError, setIsValidationError] = useState(false);\r\n  const [imageConverted, setImageConverted] = useState([]);\r\n  const cancelRef = useRef();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    setOrder({ date: new Date() });\r\n  }, []);\r\n\r\n  //change or edit products array in state\r\n  const handleOrderProduct = (name, value, id) => {\r\n    let index = orderProducts.findIndex((product) => product.image == id);\r\n    let newArray = [...orderProducts];\r\n    newArray[index] = {\r\n      ...newArray[index],\r\n      [name]: value,\r\n    };\r\n    setOrderProducts(newArray);\r\n  };\r\n\r\n  //add product to products state\r\n  const addOrderProduct = () => {\r\n    const id = uuidv4();\r\n    const newProducts = {\r\n      code: \"\",\r\n      image: id,\r\n      price: 0,\r\n      size: \"\",\r\n    };\r\n    setOrderProducts((old) => [...old, newProducts]);\r\n    console.log(orderProducts);\r\n  };\r\n\r\n  //add order to server\r\n  const addOrder = async () => {\r\n    setIsOpen(false);\r\n    setIsLoading(true);\r\n\r\n    console.log({\r\n      ...order,\r\n      payment_method: paymentMethod,\r\n      products: orderProducts,\r\n    });\r\n    const response = await addOrderAPI({\r\n      ...order,\r\n      payment_method: paymentMethod,\r\n      products: orderProducts,\r\n    });\r\n    await imageToServer(imageConverted);\r\n\r\n    setIsLoading(false);\r\n    // history.push(\"/orders\");\r\n  };\r\n  const imageToServer = async (images) => {\r\n    await uploadOrderImageAPI(images);\r\n  };\r\n  const validateFields = async (addCallback) => {\r\n    if (\r\n      !order.name ||\r\n      !order.address ||\r\n      !order.code ||\r\n      !order.size ||\r\n      !imageConverted\r\n    ) {\r\n      setIsOpen(false);\r\n      setIsValidationError(true);\r\n    } else {\r\n      setIsValidationError(false);\r\n      setIsOpen(false);\r\n      setIsValidationError(false);\r\n      addCallback();\r\n    }\r\n  };\r\n  const compressImage = async (event, productId) => {\r\n    //compresses image to below 1MB\r\n    const options = {\r\n      maxSizeMB: 1,\r\n      maxWidthOrHeight: 1280,\r\n      useWebWorker: true,\r\n    };\r\n    try {\r\n      const compressedFile = await imageCompression(\r\n        event.target.files[0],\r\n        options\r\n      );\r\n      compressedFile.lastModifiedDate = new Date();\r\n      const convertedBlobFile = new File([compressedFile], productId, {\r\n        type: compressedFile.type,\r\n        lastModified: Date.now(),\r\n      });\r\n      setImageConverted((old) => [\r\n        ...old,\r\n        { name: productId, image: convertedBlobFile },\r\n      ]);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  //product image component\r\n  const ProductImage = ({ productId }) => {\r\n    let imageObject = imageConverted.filter((image) => image.name == productId);\r\n    if (imageObject.length > 0) {\r\n      return (\r\n        <img\r\n          src={URL.createObjectURL(imageObject[0].image)}\r\n          width=\"200px\"\r\n          alt=\"image_preview\"\r\n        />\r\n      );\r\n    } else return <p>Uplaod Image</p>;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className={styles.header}>\r\n        <button className={styles.backButton} onClick={() => history.goBack()}>\r\n          <img src={backIcon} className={styles.backIcon} alt=\"back_icon\" />\r\n        </button>\r\n        <h1 className={styles.label}>Add Order</h1>\r\n      </div>\r\n      <div className={styles.container}>\r\n        <FormControl w=\"90%\" mt=\"2\" isRequired>\r\n          <FormLabel>Order Date :</FormLabel>\r\n          <DatePicker\r\n            format=\"dd/MM/yyyy\"\r\n            value={order.date}\r\n            onChange={(date) => {\r\n              setOrder({ date: date });\r\n            }}\r\n          />\r\n        </FormControl>\r\n\r\n        <FormControl w=\"90%\" mt=\"2\" isRequired>\r\n          <FormLabel>Customer Name :</FormLabel>\r\n          <Input type=\"text\" size=\"lg\" name=\"name\" onChange={updateOrder} />\r\n        </FormControl>\r\n        <FormControl id=\"customer_address\" w=\"90%\" mt=\"2\" isRequired>\r\n          <FormLabel>Address :</FormLabel>\r\n          <Textarea\r\n            type=\"text\"\r\n            size=\"lg\"\r\n            rows=\"4\"\r\n            name=\"address\"\r\n            onChange={updateOrder}\r\n          />\r\n        </FormControl>\r\n\r\n        {/* products start */}\r\n        {/* productt.image is used as id */}\r\n        {orderProducts.length > 0 &&\r\n          orderProducts.map((product) => (\r\n            <div\r\n              style={{ display: \"flex\", justifyContent: \"center\" }}\r\n              key={product.image}\r\n            >\r\n              <Box\r\n                rounded=\"md\"\r\n                bg=\"white\"\r\n                boxShadow=\"xs\"\r\n                w=\"95%\"\r\n                mt=\"3\"\r\n                d=\"flex\"\r\n                alignItems=\"center\"\r\n                flexDirection=\"column\"\r\n                position=\"relative\"\r\n              >\r\n                <IconButton\r\n                  icon={<CloseIcon />}\r\n                  position=\"absolute\"\r\n                  top=\"2\"\r\n                  right=\"2\"\r\n                  borderRadius=\"full\"\r\n                />\r\n                <ProductImage productId={product.image} />\r\n                <input\r\n                  type=\"file\"\r\n                  accept=\"image/*\"\r\n                  id=\"file-upload\"\r\n                  name=\"order-image\"\r\n                  onChange={(event) => compressImage(event, product.image)}\r\n                />\r\n                <FormControl id=\"product_cod\" w=\"95%\" mt=\"2\" isRequired>\r\n                  <InputGroup>\r\n                    <InputLeftAddon children=\"Code\" />\r\n                    <Input\r\n                      type=\"text\"\r\n                      name=\"code\"\r\n                      value={product.code}\r\n                      onChange={(e) =>\r\n                        handleOrderProduct(\r\n                          e.target.name,\r\n                          e.target.value,\r\n                          product.image\r\n                        )\r\n                      }\r\n                    />\r\n                  </InputGroup>\r\n                </FormControl>\r\n                <Stack direction=\"row\" w=\"95%\" mt=\"2\" mb=\"2\">\r\n                  <FormControl id=\"product_price\" w=\"50%\" isRequired>\r\n                    <InputGroup>\r\n                      <InputLeftAddon children=\"Price\" />\r\n                      <Input\r\n                        type=\"number\"\r\n                        name=\"price\"\r\n                        value={product.price}\r\n                        onChange={(e) =>\r\n                          handleOrderProduct(\r\n                            e.target.name,\r\n                            parseInt(e.target.value),\r\n                            product.image\r\n                          )\r\n                        }\r\n                      />\r\n                    </InputGroup>\r\n                  </FormControl>\r\n                  <FormControl id=\"product_size\" w=\"50%\" isRequired>\r\n                    <InputGroup>\r\n                      <InputLeftAddon children=\"Size\" />\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"size\"\r\n                        value={product.size}\r\n                        onChange={(e) =>\r\n                          handleOrderProduct(\r\n                            e.target.name,\r\n                            e.target.value,\r\n                            product.image\r\n                          )\r\n                        }\r\n                      />\r\n                    </InputGroup>\r\n                  </FormControl>\r\n                </Stack>\r\n              </Box>\r\n            </div>\r\n          ))}\r\n        <Button\r\n          onClick={addOrderProduct}\r\n          mt=\"3\"\r\n          alignSelf=\"flex-start\"\r\n          ml=\"3\"\r\n          colorScheme=\"blue\"\r\n        >\r\n          Add Prduct\r\n        </Button>\r\n        {/* products end */}\r\n\r\n        <FormControl id=\"payment_method\" w=\"90%\" mt=\"2\" isRequired>\r\n          <FormLabel>Payment Method :</FormLabel>\r\n          <RadioGroup\r\n            onChange={setPaymentMethod}\r\n            value={paymentMethod}\r\n            name=\"payment_method\"\r\n          >\r\n            <Stack direction=\"row\">\r\n              <Radio value=\"GPAY\">Gpay PhonePe</Radio>\r\n              <Radio value=\"ACCOUNT\">Account Transfer</Radio>\r\n              <Radio value=\"COD\">COD</Radio>\r\n            </Stack>\r\n          </RadioGroup>\r\n        </FormControl>\r\n        {paymentMethod !== \"COD\" && (\r\n          <FormControl w=\"90%\" mt=\"2\" isRequired>\r\n            <FormLabel>Transfer Details :</FormLabel>\r\n            <Textarea\r\n              type=\"text\"\r\n              size=\"lg\"\r\n              rows=\"2\"\r\n              name=\"transfer_details\"\r\n              onChange={updateOrder}\r\n            />\r\n          </FormControl>\r\n        )}\r\n        <FormControl w=\"90%\" mt=\"2\">\r\n          <FormLabel>Order Note</FormLabel>\r\n          <Input\r\n            type=\"text\"\r\n            size=\"lg\"\r\n            name=\"order_note\"\r\n            onChange={updateOrder}\r\n          />\r\n        </FormControl>\r\n        {isValidationError && (\r\n          <Alert status=\"error\" mt={2}>\r\n            <AlertIcon />\r\n            <AlertTitle mr={2}>Please Fill All Fields!</AlertTitle>\r\n          </Alert>\r\n        )}\r\n        <Button\r\n          colorScheme=\"teal\"\r\n          variant=\"solid\"\r\n          size=\"xs\"\r\n          w=\"90%\"\r\n          padding=\"6\"\r\n          mt=\"6\"\r\n          mb=\"6\"\r\n          isLoading={isLoading}\r\n          loadingText=\"Uploading\"\r\n          onClick={() => setIsOpen(true)}\r\n        >\r\n          Add order\r\n        </Button>\r\n        <AlertDialog\r\n          isOpen={isOpen}\r\n          leastDestructiveRef={cancelRef}\r\n          onClose={() => setIsOpen(false)}\r\n        >\r\n          <AlertDialogOverlay>\r\n            <AlertDialogContent w=\"90%\" pos=\"center\">\r\n              <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\r\n                Add Order\r\n              </AlertDialogHeader>\r\n\r\n              <AlertDialogBody>\r\n                Are you sure you want to add this order ?\r\n              </AlertDialogBody>\r\n\r\n              <AlertDialogFooter>\r\n                <Button ref={cancelRef} onClick={() => setIsOpen(false)}>\r\n                  Cancel\r\n                </Button>\r\n                <Button colorScheme=\"green\" ml={3} onClick={() => addOrder()}>\r\n                  Add\r\n                </Button>\r\n              </AlertDialogFooter>\r\n            </AlertDialogContent>\r\n          </AlertDialogOverlay>\r\n        </AlertDialog>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddOrder;\r\n","D:\\Abony Price Directory\\price-directory\\src\\components\\TableSize.js",[],"D:\\Abony Price Directory\\price-directory\\src\\pages\\productAdd.js",["123","124","125","126","127","128","129"],"D:\\Abony Price Directory\\price-directory\\src\\pages\\ProductEditAdmin.js",["130","131","132","133","134","135","136","137","138","139","140","141","142"],"D:\\Abony Price Directory\\price-directory\\src\\API\\category.js",[],{"ruleId":"143","replacedBy":"144"},{"ruleId":"145","replacedBy":"146"},{"ruleId":"147","severity":1,"message":"148","line":24,"column":3,"nodeType":"149","messageId":"150","endLine":24,"endColumn":15},{"ruleId":"151","severity":1,"message":"152","line":103,"column":6,"nodeType":"153","endLine":103,"endColumn":8,"suggestions":"154"},{"ruleId":"147","severity":1,"message":"155","line":141,"column":7,"nodeType":"149","messageId":"150","endLine":141,"endColumn":10},{"ruleId":"147","severity":1,"message":"156","line":5,"column":8,"nodeType":"149","messageId":"150","endLine":5,"endColumn":13},{"ruleId":"147","severity":1,"message":"157","line":12,"column":3,"nodeType":"149","messageId":"150","endLine":12,"endColumn":6},{"ruleId":"147","severity":1,"message":"158","line":15,"column":8,"nodeType":"149","messageId":"150","endLine":15,"endColumn":19},{"ruleId":"147","severity":1,"message":"159","line":16,"column":10,"nodeType":"149","messageId":"150","endLine":16,"endColumn":24},{"ruleId":"160","severity":1,"message":"161","line":39,"column":21,"nodeType":"162","messageId":"163","endLine":39,"endColumn":23},{"ruleId":"151","severity":1,"message":"164","line":44,"column":6,"nodeType":"153","endLine":44,"endColumn":19,"suggestions":"165"},{"ruleId":"151","severity":1,"message":"166","line":71,"column":6,"nodeType":"153","endLine":71,"endColumn":8,"suggestions":"167"},{"ruleId":"147","severity":1,"message":"168","line":76,"column":11,"nodeType":"149","messageId":"150","endLine":76,"endColumn":25},{"ruleId":"143","replacedBy":"169"},{"ruleId":"145","replacedBy":"170"},{"ruleId":"147","severity":1,"message":"171","line":10,"column":3,"nodeType":"149","messageId":"150","endLine":10,"endColumn":13},{"ruleId":"147","severity":1,"message":"172","line":11,"column":3,"nodeType":"149","messageId":"150","endLine":11,"endColumn":20},{"ruleId":"147","severity":1,"message":"173","line":12,"column":3,"nodeType":"149","messageId":"150","endLine":12,"endColumn":13},{"ruleId":"147","severity":1,"message":"157","line":13,"column":3,"nodeType":"149","messageId":"150","endLine":13,"endColumn":6},{"ruleId":"143","replacedBy":"174"},{"ruleId":"145","replacedBy":"175"},{"ruleId":"176","severity":1,"message":"177","line":53,"column":24,"nodeType":"178","messageId":"179","endLine":53,"endColumn":26},{"ruleId":"147","severity":1,"message":"180","line":7,"column":8,"nodeType":"149","messageId":"150","endLine":7,"endColumn":17},{"ruleId":"151","severity":1,"message":"181","line":36,"column":6,"nodeType":"153","endLine":36,"endColumn":8,"suggestions":"182"},{"ruleId":"160","severity":1,"message":"161","line":39,"column":21,"nodeType":"162","messageId":"163","endLine":39,"endColumn":23},{"ruleId":"183","severity":1,"message":"184","line":83,"column":13,"nodeType":"185","endLine":83,"endColumn":72},{"ruleId":"147","severity":1,"message":"186","line":6,"column":10,"nodeType":"149","messageId":"150","endLine":6,"endColumn":20},{"ruleId":"147","severity":1,"message":"187","line":11,"column":3,"nodeType":"149","messageId":"150","endLine":11,"endColumn":8},{"ruleId":"147","severity":1,"message":"171","line":12,"column":3,"nodeType":"149","messageId":"150","endLine":12,"endColumn":13},{"ruleId":"147","severity":1,"message":"172","line":13,"column":3,"nodeType":"149","messageId":"150","endLine":13,"endColumn":20},{"ruleId":"147","severity":1,"message":"188","line":23,"column":10,"nodeType":"149","messageId":"150","endLine":23,"endColumn":16},{"ruleId":"147","severity":1,"message":"189","line":23,"column":18,"nodeType":"149","messageId":"150","endLine":23,"endColumn":27},{"ruleId":"151","severity":1,"message":"190","line":39,"column":6,"nodeType":"153","endLine":39,"endColumn":18,"suggestions":"191"},{"ruleId":"192","severity":1,"message":"193","line":106,"column":17,"nodeType":"194","endLine":106,"endColumn":23},{"ruleId":"160","severity":1,"message":"161","line":40,"column":21,"nodeType":"162","messageId":"163","endLine":40,"endColumn":23},{"ruleId":"183","severity":1,"message":"184","line":84,"column":13,"nodeType":"185","endLine":84,"endColumn":72},{"ruleId":"151","severity":1,"message":"195","line":53,"column":6,"nodeType":"153","endLine":53,"endColumn":8,"suggestions":"196"},{"ruleId":"160","severity":1,"message":"161","line":57,"column":68,"nodeType":"162","messageId":"163","endLine":57,"endColumn":70},{"ruleId":"147","severity":1,"message":"197","line":89,"column":11,"nodeType":"149","messageId":"150","endLine":89,"endColumn":19},{"ruleId":"147","severity":1,"message":"198","line":102,"column":9,"nodeType":"149","messageId":"150","endLine":102,"endColumn":23},{"ruleId":"160","severity":1,"message":"161","line":147,"column":67,"nodeType":"162","messageId":"163","endLine":147,"endColumn":69},{"ruleId":"147","severity":1,"message":"199","line":7,"column":8,"nodeType":"149","messageId":"150","endLine":7,"endColumn":14},{"ruleId":"147","severity":1,"message":"148","line":20,"column":3,"nodeType":"149","messageId":"150","endLine":20,"endColumn":15},{"ruleId":"147","severity":1,"message":"171","line":24,"column":3,"nodeType":"149","messageId":"150","endLine":24,"endColumn":13},{"ruleId":"147","severity":1,"message":"172","line":25,"column":3,"nodeType":"149","messageId":"150","endLine":25,"endColumn":20},{"ruleId":"151","severity":1,"message":"200","line":77,"column":6,"nodeType":"153","endLine":77,"endColumn":8,"suggestions":"201"},{"ruleId":"147","severity":1,"message":"202","line":86,"column":9,"nodeType":"149","messageId":"150","endLine":86,"endColumn":19},{"ruleId":"192","severity":1,"message":"193","line":283,"column":13,"nodeType":"194","endLine":283,"endColumn":26},{"ruleId":"147","severity":1,"message":"203","line":6,"column":16,"nodeType":"149","messageId":"150","endLine":6,"endColumn":22},{"ruleId":"147","severity":1,"message":"148","line":20,"column":3,"nodeType":"149","messageId":"150","endLine":20,"endColumn":15},{"ruleId":"147","severity":1,"message":"204","line":26,"column":3,"nodeType":"149","messageId":"150","endLine":26,"endColumn":9},{"ruleId":"147","severity":1,"message":"205","line":27,"column":3,"nodeType":"149","messageId":"150","endLine":27,"endColumn":8},{"ruleId":"147","severity":1,"message":"206","line":28,"column":3,"nodeType":"149","messageId":"150","endLine":28,"endColumn":8},{"ruleId":"147","severity":1,"message":"207","line":30,"column":3,"nodeType":"149","messageId":"150","endLine":30,"endColumn":13},{"ruleId":"147","severity":1,"message":"208","line":31,"column":3,"nodeType":"149","messageId":"150","endLine":31,"endColumn":14},{"ruleId":"147","severity":1,"message":"209","line":32,"column":3,"nodeType":"149","messageId":"150","endLine":32,"endColumn":18},{"ruleId":"147","severity":1,"message":"210","line":33,"column":3,"nodeType":"149","messageId":"150","endLine":33,"endColumn":20},{"ruleId":"147","severity":1,"message":"211","line":34,"column":3,"nodeType":"149","messageId":"150","endLine":34,"endColumn":20},{"ruleId":"147","severity":1,"message":"212","line":35,"column":3,"nodeType":"149","messageId":"150","endLine":35,"endColumn":21},{"ruleId":"147","severity":1,"message":"213","line":36,"column":3,"nodeType":"149","messageId":"150","endLine":36,"endColumn":21},{"ruleId":"151","severity":1,"message":"214","line":57,"column":6,"nodeType":"153","endLine":57,"endColumn":8,"suggestions":"215"},"no-native-reassign",["216"],"no-negated-in-lhs",["217"],"no-unused-vars","'TableCaption' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'productId'. Either include it or remove the dependency array.","ArrayExpression",["218"],"'arr' is assigned a value but never used.","'Admin' is defined but never used.","'Box' is defined but never used.","'Placeholder' is defined but never used.","'ChakraProvider' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'doSearch'. Either include it or remove the dependency array.",["219"],"React Hook useEffect has missing dependencies: 'orderId' and 'setOrder'. Either include them or remove the dependency array.",["220"],"'updateResponse' is assigned a value but never used.",["216"],["217"],"'InputGroup' is defined but never used.","'InputRightElement' is defined but never used.","'IconButton' is defined but never used.",["216"],["217"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'TabHeader' is defined but never used.","React Hook useEffect has a missing dependency: 'categoryId'. Either include it or remove the dependency array.",["221"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'SearchIcon' is defined but never used.","'Input' is defined but never used.","'filter' is assigned a value but never used.","'setFilter' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'handleFilter'. Either include it or remove the dependency array.",["222"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","React Hook useEffect has a missing dependency: 'setOrder'. Either include it or remove the dependency array.",["223"],"'response' is assigned a value but never used.","'validateFields' is assigned a value but never used.","'Loader' is defined but never used.","React Hook useEffect has a missing dependency: 'setProduct'. Either include it or remove the dependency array.",["224"],"'imageNames' is assigned a value but never used.","'uuidv4' is defined but never used.","'Select' is defined but never used.","'Stack' is defined but never used.","'Image' is defined but never used.","'SimpleGrid' is defined but never used.","'AlertDialog' is defined but never used.","'AlertDialogBody' is defined but never used.","'AlertDialogFooter' is defined but never used.","'AlertDialogHeader' is defined but never used.","'AlertDialogContent' is defined but never used.","'AlertDialogOverlay' is defined but never used.","React Hook useEffect has missing dependencies: 'productId' and 'setProduct'. Either include them or remove the dependency array.",["225"],"no-global-assign","no-unsafe-negation",{"desc":"226","fix":"227"},{"desc":"228","fix":"229"},{"desc":"230","fix":"231"},{"desc":"232","fix":"233"},{"desc":"234","fix":"235"},{"desc":"236","fix":"237"},{"desc":"238","fix":"239"},{"desc":"240","fix":"241"},"Update the dependencies array to be: [productId]",{"range":"242","text":"243"},"Update the dependencies array to be: [doSearch, searchValue]",{"range":"244","text":"245"},"Update the dependencies array to be: [orderId, setOrder]",{"range":"246","text":"247"},"Update the dependencies array to be: [categoryId]",{"range":"248","text":"249"},"Update the dependencies array to be: [categories, handleFilter]",{"range":"250","text":"251"},"Update the dependencies array to be: [setOrder]",{"range":"252","text":"253"},"Update the dependencies array to be: [setProduct]",{"range":"254","text":"255"},"Update the dependencies array to be: [productId, setProduct]",{"range":"256","text":"257"},[3119,3121],"[productId]",[1385,1398],"[doSearch, searchValue]",[2122,2124],"[orderId, setOrder]",[1288,1290],"[categoryId]",[1175,1187],"[categories, handleFilter]",[1567,1569],"[setOrder]",[2114,2116],"[setProduct]",[1643,1645],"[productId, setProduct]"]