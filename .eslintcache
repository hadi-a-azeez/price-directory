[{"D:\\Abony Price Directory\\price-directory\\src\\pages\\Products.js":"1","D:\\Abony Price Directory\\price-directory\\src\\pages\\productAdd.js":"2","D:\\Abony Price Directory\\price-directory\\src\\pages\\Home.js":"3","D:\\Abony Price Directory\\price-directory\\src\\pages\\orderDetailed.js":"4","D:\\Abony Price Directory\\price-directory\\src\\components\\CopyItems.js":"5","D:\\Abony Price Directory\\price-directory\\src\\index.js":"6","D:\\Abony Price Directory\\price-directory\\src\\pages\\ProductEditAdmin.js":"7","D:\\Abony Price Directory\\price-directory\\src\\pages\\ProductsAdmin.js":"8","D:\\Abony Price Directory\\price-directory\\src\\components\\TableSize.js":"9","D:\\Abony Price Directory\\price-directory\\src\\components\\useForm.js":"10","D:\\Abony Price Directory\\price-directory\\src\\pages\\addOrder.js":"11","D:\\Abony Price Directory\\price-directory\\src\\pages\\orders.js":"12"},{"size":5241,"mtime":1608618634232,"results":"13","hashOfConfig":"14"},{"size":9592,"mtime":1608271275366,"results":"15","hashOfConfig":"14"},{"size":1279,"mtime":1608618634216,"results":"16","hashOfConfig":"14"},{"size":10776,"mtime":1608624579400,"results":"17","hashOfConfig":"14"},{"size":2840,"mtime":1608012973093,"results":"18","hashOfConfig":"14"},{"size":547,"mtime":1608618634216,"results":"19","hashOfConfig":"14"},{"size":9145,"mtime":1608618634232,"results":"20","hashOfConfig":"14"},{"size":5208,"mtime":1608285489852,"results":"21","hashOfConfig":"14"},{"size":1216,"mtime":1608012459744,"results":"22","hashOfConfig":"14"},{"size":340,"mtime":1608621084751,"results":"23","hashOfConfig":"14"},{"size":6624,"mtime":1608624003267,"results":"24","hashOfConfig":"14"},{"size":2652,"mtime":1608624666697,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"6qx1r0",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Abony Price Directory\\price-directory\\src\\pages\\Products.js",["51"],"D:\\Abony Price Directory\\price-directory\\src\\pages\\productAdd.js",[],"D:\\Abony Price Directory\\price-directory\\src\\pages\\Home.js",[],"D:\\Abony Price Directory\\price-directory\\src\\pages\\orderDetailed.js",["52","53","54"],"D:\\Abony Price Directory\\price-directory\\src\\components\\CopyItems.js",[],"D:\\Abony Price Directory\\price-directory\\src\\index.js",[],"D:\\Abony Price Directory\\price-directory\\src\\pages\\ProductEditAdmin.js",["55","56","57"],"D:\\Abony Price Directory\\price-directory\\src\\pages\\ProductsAdmin.js",[],"D:\\Abony Price Directory\\price-directory\\src\\components\\TableSize.js",[],"D:\\Abony Price Directory\\price-directory\\src\\components\\useForm.js",[],"D:\\Abony Price Directory\\price-directory\\src\\pages\\addOrder.js",["58","59"],"import { React, useRef, useState } from \"react\";\r\nimport styles from \"./addOrder.module.scss\";\r\nimport imageCompression from \"browser-image-compression\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport backIcon from \"../assets/backIcon.png\";\r\nimport { useForm } from \"../components/useForm\";\r\nimport firebase from \"../firebase\";\r\nimport {\r\n  Input,\r\n  FormControl,\r\n  FormLabel,\r\n  Textarea,\r\n  Stack,\r\n  Radio,\r\n  RadioGroup,\r\n  Button,\r\n  AlertDialog,\r\n  AlertDialogBody,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogContent,\r\n  AlertDialogOverlay,\r\n} from \"@chakra-ui/react\";\r\n\r\nconst AddOrder = () => {\r\n  const [paymentMethod, setPaymentMethod] = useState(\"3\");\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [order, setOrder, updateOrder] = useForm([]);\r\n  const [imageConverted, setImageConverted] = useState();\r\n  const cancelRef = useRef();\r\n  const history = useHistory();\r\n  const db = firebase.firestore();\r\n\r\n  const addOrder = async () => {\r\n    setIsOpen(false);\r\n    setIsLoading(true);\r\n\r\n    let imageName = await imageToServer(imageConverted);\r\n    db.collection(\"orders\").add({\r\n      date: Date.now(),\r\n      payment_method: paymentMethod,\r\n      order_status: \"1\",\r\n      product_image: imageName,\r\n      ...order,\r\n    });\r\n    setIsLoading(false);\r\n    history.push(\"/orders\");\r\n  };\r\n  const compressImage = async (event) => {\r\n    //compresses image to below 1MB\r\n    const options = {\r\n      maxSizeMB: 1,\r\n      maxWidthOrHeight: 1280,\r\n      useWebWorker: true,\r\n    };\r\n    try {\r\n      const compressedFile = await imageCompression(\r\n        event.target.files[0],\r\n        options\r\n      );\r\n      setImageConverted(compressedFile);\r\n      // setProductImageConverted(URL.createObjectURL(compressedFile));\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n  const imageToServer = async (image) => {\r\n    //upload image to firebase storage\r\n    let storageRef = firebase.storage().ref();\r\n    let imagesRef = storageRef.child(\"images\");\r\n    let imageName = uuidv4();\r\n    let spaceRef = imagesRef.child(imageName);\r\n    let resp = await spaceRef.put(image);\r\n    return imageName;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className={styles.header}>\r\n        <button className={styles.backButton} onClick={() => history.goBack()}>\r\n          <img src={backIcon} className={styles.backIcon} alt=\"back_icon\" />\r\n        </button>\r\n        <h1 className={styles.label}>Add Order</h1>\r\n      </div>\r\n      <div className={styles.container}>\r\n        <FormControl id=\"customer_name\" w=\"90%\" mt=\"2\" isRequired>\r\n          <FormLabel>Customer Name :</FormLabel>\r\n          <Input\r\n            type=\"text\"\r\n            size=\"lg\"\r\n            name=\"customer_name\"\r\n            onChange={updateOrder}\r\n          />\r\n        </FormControl>\r\n        <FormControl id=\"customer_address\" w=\"90%\" mt=\"2\" isRequired>\r\n          <FormLabel>Address :</FormLabel>\r\n          <Textarea\r\n            type=\"text\"\r\n            size=\"lg\"\r\n            rows=\"4\"\r\n            name=\"customer_address\"\r\n            onChange={updateOrder}\r\n          />\r\n        </FormControl>\r\n        <img\r\n          src={imageConverted && URL.createObjectURL(imageConverted)}\r\n          width=\"200px\"\r\n          alt=\"image_preview\"\r\n        />\r\n        <input\r\n          type=\"file\"\r\n          accept=\"image/*\"\r\n          id=\"file-upload\"\r\n          onChange={(event) => compressImage(event)}\r\n        />\r\n        <FormControl id=\"product_cod\" w=\"90%\" mt=\"2\" isRequired>\r\n          <FormLabel>Product Code:</FormLabel>\r\n          <Input\r\n            type=\"text\"\r\n            size=\"lg\"\r\n            name=\"product_cod\"\r\n            onChange={updateOrder}\r\n          />\r\n        </FormControl>\r\n        <FormControl id=\"product_price\" w=\"90%\" mt=\"2\" isRequired>\r\n          <FormLabel>Product Price :</FormLabel>\r\n          <Input\r\n            type=\"number\"\r\n            size=\"lg\"\r\n            name=\"product_price\"\r\n            onChange={updateOrder}\r\n          />\r\n        </FormControl>\r\n        <FormControl id=\"product_size\" w=\"90%\" mt=\"2\" isRequired>\r\n          <FormLabel>Product Size :</FormLabel>\r\n          <Input\r\n            type=\"text\"\r\n            size=\"lg\"\r\n            name=\"product_size\"\r\n            onChange={updateOrder}\r\n          />\r\n        </FormControl>\r\n        <FormControl id=\"payment_method\" w=\"90%\" mt=\"2\" isRequired>\r\n          <FormLabel>Payment Method :</FormLabel>\r\n          <RadioGroup\r\n            onChange={setPaymentMethod}\r\n            value={paymentMethod}\r\n            name=\"payement_method\"\r\n          >\r\n            <Stack direction=\"row\">\r\n              <Radio value=\"1\">Gpay PhonePe</Radio>\r\n              <Radio value=\"2\">Account Transfer</Radio>\r\n              <Radio value=\"3\">COD</Radio>\r\n            </Stack>\r\n          </RadioGroup>\r\n        </FormControl>\r\n        {paymentMethod !== \"3\" && (\r\n          <FormControl id=\"trasfer_details\" w=\"90%\" mt=\"2\" isRequired>\r\n            <FormLabel>Transfer Details :</FormLabel>\r\n            <Textarea\r\n              type=\"text\"\r\n              size=\"lg\"\r\n              rows=\"2\"\r\n              name=\"transfer_details\"\r\n              onChange={updateOrder}\r\n            />\r\n          </FormControl>\r\n        )}\r\n        <Button\r\n          colorScheme=\"teal\"\r\n          variant=\"solid\"\r\n          size=\"xs\"\r\n          w=\"90%\"\r\n          padding=\"6\"\r\n          mt=\"6\"\r\n          mb=\"6\"\r\n          isLoading={isLoading}\r\n          loadingText=\"Uploading\"\r\n          onClick={() => setIsOpen(true)}\r\n        >\r\n          Add order\r\n        </Button>\r\n        <AlertDialog\r\n          isOpen={isOpen}\r\n          leastDestructiveRef={cancelRef}\r\n          onClose={() => setIsOpen(false)}\r\n        >\r\n          <AlertDialogOverlay>\r\n            <AlertDialogContent w=\"90%\" pos=\"center\">\r\n              <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\r\n                Add Order\r\n              </AlertDialogHeader>\r\n\r\n              <AlertDialogBody>\r\n                Are you sure you want to add this order ?\r\n              </AlertDialogBody>\r\n\r\n              <AlertDialogFooter>\r\n                <Button ref={cancelRef} onClick={() => setIsOpen(false)}>\r\n                  Cancel\r\n                </Button>\r\n                <Button colorScheme=\"green\" ml={3} onClick={addOrder}>\r\n                  Add\r\n                </Button>\r\n              </AlertDialogFooter>\r\n            </AlertDialogContent>\r\n          </AlertDialogOverlay>\r\n        </AlertDialog>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddOrder;\r\n","D:\\Abony Price Directory\\price-directory\\src\\pages\\orders.js",["60"],{"ruleId":"61","severity":1,"message":"62","line":33,"column":6,"nodeType":"63","endLine":33,"endColumn":8,"suggestions":"64"},{"ruleId":"65","severity":1,"message":"66","line":34,"column":10,"nodeType":"67","messageId":"68","endLine":34,"endColumn":21},{"ruleId":"61","severity":1,"message":"69","line":65,"column":6,"nodeType":"63","endLine":65,"endColumn":8,"suggestions":"70"},{"ruleId":"65","severity":1,"message":"71","line":70,"column":11,"nodeType":"67","messageId":"68","endLine":70,"endColumn":17},{"ruleId":"65","severity":1,"message":"72","line":2,"column":8,"nodeType":"67","messageId":"68","endLine":2,"endColumn":24},{"ruleId":"65","severity":1,"message":"73","line":7,"column":16,"nodeType":"67","messageId":"68","endLine":7,"endColumn":22},{"ruleId":"61","severity":1,"message":"74","line":31,"column":6,"nodeType":"63","endLine":31,"endColumn":8,"suggestions":"75"},{"ruleId":"65","severity":1,"message":"76","line":30,"column":17,"nodeType":"67","messageId":"68","endLine":30,"endColumn":25},{"ruleId":"65","severity":1,"message":"77","line":75,"column":9,"nodeType":"67","messageId":"68","endLine":75,"endColumn":13},{"ruleId":"61","severity":1,"message":"78","line":27,"column":6,"nodeType":"63","endLine":27,"endColumn":8,"suggestions":"79"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'productsRef' and 'updateProductsState'. Either include them or remove the dependency array.","ArrayExpression",["80"],"no-unused-vars","'orderStatus' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'id', 'ref', and 'setOrder'. Either include them or remove the dependency array.",["81"],"'update' is assigned a value but never used.","'imageCompression' is defined but never used.","'uuidv4' is defined but never used.","React Hook useEffect has missing dependencies: 'id' and 'ref'. Either include them or remove the dependency array.",["82"],"'setOrder' is assigned a value but never used.","'resp' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'db'. Either include it or remove the dependency array.",["83"],{"desc":"84","fix":"85"},{"desc":"86","fix":"87"},{"desc":"88","fix":"89"},{"desc":"90","fix":"91"},"Update the dependencies array to be: [productsRef, updateProductsState]",{"range":"92","text":"93"},"Update the dependencies array to be: [id, ref, setOrder]",{"range":"94","text":"95"},"Update the dependencies array to be: [id, ref]",{"range":"96","text":"97"},"Update the dependencies array to be: [db]",{"range":"98","text":"99"},[1371,1373],"[productsRef, updateProductsState]",[2000,2002],"[id, ref, setOrder]",[1243,1245],"[id, ref]",[865,867],"[db]"]