[{"D:\\Abony Price Directory\\price-directory\\src\\pages\\Products.js":"1","D:\\Abony Price Directory\\price-directory\\src\\pages\\productAdd.js":"2","D:\\Abony Price Directory\\price-directory\\src\\pages\\Home.js":"3","D:\\Abony Price Directory\\price-directory\\src\\pages\\orderDetailed.js":"4","D:\\Abony Price Directory\\price-directory\\src\\components\\CopyItems.js":"5","D:\\Abony Price Directory\\price-directory\\src\\index.js":"6","D:\\Abony Price Directory\\price-directory\\src\\pages\\ProductEditAdmin.js":"7","D:\\Abony Price Directory\\price-directory\\src\\pages\\ProductsAdmin.js":"8","D:\\Abony Price Directory\\price-directory\\src\\components\\TableSize.js":"9","D:\\Abony Price Directory\\price-directory\\src\\components\\useForm.js":"10","D:\\Abony Price Directory\\price-directory\\src\\pages\\addOrder.js":"11","D:\\Abony Price Directory\\price-directory\\src\\pages\\orders.js":"12","D:\\Abony Price Directory\\price-directory\\src\\App.js":"13","D:\\Abony Price Directory\\price-directory\\src\\pages\\addCategoryAdmin.js":"14","D:\\Abony Price Directory\\price-directory\\src\\pages\\categoriesAdmin.js":"15","D:\\Abony Price Directory\\price-directory\\src\\firebase.js":"16"},{"size":5280,"mtime":1608715222907,"results":"17","hashOfConfig":"18"},{"size":10258,"mtime":1608714795493,"results":"19","hashOfConfig":"18"},{"size":1279,"mtime":1608618634216,"results":"20","hashOfConfig":"18"},{"size":10776,"mtime":1608624579400,"results":"21","hashOfConfig":"18"},{"size":2840,"mtime":1608012973093,"results":"22","hashOfConfig":"18"},{"size":547,"mtime":1608618634216,"results":"23","hashOfConfig":"18"},{"size":9145,"mtime":1608618634232,"results":"24","hashOfConfig":"18"},{"size":5366,"mtime":1608715291218,"results":"25","hashOfConfig":"18"},{"size":1216,"mtime":1608012459744,"results":"26","hashOfConfig":"18"},{"size":382,"mtime":1608714486946,"results":"27","hashOfConfig":"18"},{"size":6605,"mtime":1608707557930,"results":"28","hashOfConfig":"18"},{"size":2652,"mtime":1608631923976,"results":"29","hashOfConfig":"18"},{"size":1753,"mtime":1608618634216,"results":"30","hashOfConfig":"18"},{"size":2352,"mtime":1608618634232,"results":"31","hashOfConfig":"18"},{"size":3000,"mtime":1608618634232,"results":"32","hashOfConfig":"18"},{"size":516,"mtime":1606994261113,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"6qx1r0",{"filePath":"36","messages":"37","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"40"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Abony Price Directory\\price-directory\\src\\pages\\Products.js",["70"],"D:\\Abony Price Directory\\price-directory\\src\\pages\\productAdd.js",["71","72","73","74","75","76","77","78","79","80","81","82","83","84","85"],"D:\\Abony Price Directory\\price-directory\\src\\pages\\Home.js",[],["86","87"],"D:\\Abony Price Directory\\price-directory\\src\\pages\\orderDetailed.js",["88","89","90"],"import { React, useRef, useState, useEffect } from \"react\";\r\nimport styles from \"./addOrder.module.scss\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport backIcon from \"../assets/backIcon.png\";\r\nimport { useForm } from \"../components/useForm\";\r\nimport firebase from \"../firebase\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\nimport {\r\n  Input,\r\n  FormControl,\r\n  FormLabel,\r\n  Textarea,\r\n  Stack,\r\n  Radio,\r\n  RadioGroup,\r\n  Button,\r\n  useToast,\r\n  AlertDialog,\r\n  AlertDialogBody,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogContent,\r\n  AlertDialogOverlay,\r\n} from \"@chakra-ui/react\";\r\n\r\nconst OrderDetailed = (props) => {\r\n  const [isUpdateOpen, setIsUpdateOpen] = useState(false); //setting state for update btn modal\r\n  const [isDeleteOpen, setIsDeleteOpen] = useState(false); //setting state for delete btn modal\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [order, setOrder, updateOrder] = useForm([]);\r\n\r\n  const [isBtnLoading, setIsBtnLoading] = useState(false);\r\n  const [orderStatus, setOrderStatus] = useState(\"\");\r\n  const cancelRef = useRef();\r\n  const history = useHistory();\r\n  const id = props.match.params.id;\r\n  const db = firebase.firestore();\r\n  const ref = db.collection(\"orders\");\r\n  const toast = useToast();\r\n  const updateModal = {\r\n    header: \"Update Order\",\r\n    body: \"Are you sure you want to update this order ?\",\r\n    button: \"Update\",\r\n    btnColor: \"green\",\r\n  };\r\n  const deleteModal = {\r\n    header: \"Delete Order\",\r\n    body: \"Are you sure you want to delete this order ?\",\r\n    button: \"Delete\",\r\n    btnColor: \"red\",\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setIsLoading(true);\r\n      const snapshot = await ref.doc(id).get();\r\n      const data = snapshot.data();\r\n      setOrder(data);\r\n      setOrderStatus(data.order_status);\r\n      console.log(data);\r\n      setIsLoading(false);\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  const handleUpdateOrder = async () => {\r\n    setIsUpdateOpen(false);\r\n    setIsBtnLoading(true);\r\n    const update = await ref.doc(id).set(order);\r\n    setIsBtnLoading(false);\r\n    toast({\r\n      title: \"Order updated.\",\r\n      description: \"Order updated successfully.\",\r\n      status: \"success\",\r\n      duration: 2000,\r\n      isClosable: true,\r\n      position: \"bottom\",\r\n    });\r\n  };\r\n\r\n  const handlDeleteOrder = () => {\r\n    ref.doc(id).delete();\r\n    history.goBack();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className={styles.header}>\r\n        <button className={styles.backButton} onClick={() => history.goBack()}>\r\n          <img src={backIcon} className={styles.backIcon} alt=\"back_icon\" />\r\n        </button>\r\n        <h1 className={styles.label}>Order Detailed</h1>\r\n      </div>\r\n      {isLoading ? (\r\n        <div className={styles.loaderwraper}>\r\n          <Loader\r\n            type=\"Oval\"\r\n            color=\"#0278ae\"\r\n            height={50}\r\n            width={50}\r\n            visible={isLoading}\r\n          />\r\n        </div>\r\n      ) : (\r\n        <div></div>\r\n      )}\r\n      <div className={styles.container}>\r\n        {!isLoading && (\r\n          <>\r\n            {order.product_image && (\r\n              <img\r\n                src={`https://firebasestorage.googleapis.com/v0/b/abony-price-directory.appspot.com/o/images%2F${order.product_image}?alt=media`}\r\n                alt=\"product_image`\"\r\n                width=\"200px\"\r\n              />\r\n            )}\r\n            <FormControl id=\"customer_name\" w=\"90%\" mt=\"2\" isRequired>\r\n              <FormLabel>Customer Name :</FormLabel>\r\n              <Input\r\n                type=\"text\"\r\n                size=\"lg\"\r\n                name=\"customer_name\"\r\n                value={order.customer_name}\r\n                variant=\"filled\"\r\n                disabled\r\n              />\r\n            </FormControl>\r\n            <FormControl id=\"customer_address\" w=\"90%\" mt=\"2\" isRequired>\r\n              <FormLabel>Address :</FormLabel>\r\n              <Textarea\r\n                type=\"text\"\r\n                size=\"lg\"\r\n                rows=\"4\"\r\n                name=\"customer_address\"\r\n                value={order.customer_address}\r\n                variant=\"filled\"\r\n                disabled\r\n              />\r\n            </FormControl>\r\n            <FormControl id=\"product_cod\" w=\"90%\" mt=\"2\" isRequired>\r\n              <FormLabel>Product Code:</FormLabel>\r\n              <Input\r\n                type=\"text\"\r\n                size=\"lg\"\r\n                name=\"product_cod\"\r\n                variant=\"filled\"\r\n                value={order.product_cod}\r\n                disabled\r\n              />\r\n            </FormControl>\r\n            <FormControl id=\"product_price\" w=\"90%\" mt=\"2\" isRequired>\r\n              <FormLabel>Product Price :</FormLabel>\r\n              <Input\r\n                type=\"number\"\r\n                size=\"lg\"\r\n                name=\"product_price\"\r\n                variant=\"filled\"\r\n                value={order.product_price}\r\n                disabled\r\n              />\r\n            </FormControl>\r\n            <FormControl id=\"product_size\" w=\"90%\" mt=\"2\" isRequired>\r\n              <FormLabel>Product Size :</FormLabel>\r\n              <Input\r\n                type=\"text\"\r\n                size=\"lg\"\r\n                name=\"product_size\"\r\n                variant=\"filled\"\r\n                value={order.product_size}\r\n                disabled\r\n              />\r\n            </FormControl>\r\n            <FormControl id=\"payment_method\" w=\"90%\" mt=\"2\" isRequired>\r\n              <FormLabel>Payment Method :</FormLabel>\r\n              <RadioGroup\r\n                disabled\r\n                value={order.payment_method}\r\n                name=\"payement_method\"\r\n              >\r\n                <Stack direction=\"row\">\r\n                  <Radio value=\"1\">Gpay PhonePe</Radio>\r\n                  <Radio value=\"2\">Account Transfer</Radio>\r\n                  <Radio value=\"3\">COD</Radio>\r\n                </Stack>\r\n              </RadioGroup>\r\n            </FormControl>\r\n\r\n            <FormControl id=\"trasfer_details\" w=\"90%\" mt=\"2\" isRequired>\r\n              <FormLabel>Transfer Details :</FormLabel>\r\n              <Textarea\r\n                type=\"text\"\r\n                size=\"lg\"\r\n                rows=\"2\"\r\n                name=\"transfer_details\"\r\n                variant=\"filled\"\r\n                value={order.transfer_details || \"\"}\r\n                disabled\r\n              />\r\n            </FormControl>\r\n\r\n            <FormControl id=\"order_status\" w=\"90%\" mt=\"2\" isRequired>\r\n              <FormLabel>Order Status :</FormLabel>\r\n              <RadioGroup value={order.order_status}>\r\n                <Stack direction=\"row\">\r\n                  <Radio value=\"1\" onChange={updateOrder} name=\"order_status\">\r\n                    Accepted\r\n                  </Radio>\r\n                  <Radio value=\"2\" onChange={updateOrder} name=\"order_status\">\r\n                    Dispatched\r\n                  </Radio>\r\n                  <Radio value=\"3\" onChange={updateOrder} name=\"order_status\">\r\n                    Delivered\r\n                  </Radio>\r\n                </Stack>\r\n              </RadioGroup>\r\n            </FormControl>\r\n            <FormControl id=\"tracking_id\" w=\"90%\" mt=\"2\" isRequired>\r\n              <FormLabel>Tracking Id :</FormLabel>\r\n              <Input\r\n                type=\"text\"\r\n                size=\"lg\"\r\n                name=\"tracking_id\"\r\n                value={order.tracking_id || \"\"}\r\n                onChange={updateOrder}\r\n              />\r\n            </FormControl>\r\n            <Button\r\n              colorScheme=\"teal\"\r\n              variant=\"solid\"\r\n              size=\"xs\"\r\n              w=\"90%\"\r\n              padding=\"6\"\r\n              mt=\"6\"\r\n              isLoading={isBtnLoading}\r\n              loadingText=\"Updating\"\r\n              onClick={() => setIsUpdateOpen(true)}\r\n            >\r\n              Update Order\r\n            </Button>\r\n            <Button\r\n              colorScheme=\"red\"\r\n              variant=\"solid\"\r\n              size=\"xs\"\r\n              w=\"90%\"\r\n              padding=\"6\"\r\n              mt=\"3\"\r\n              mb=\"6\"\r\n              onClick={() => setIsDeleteOpen(true)}\r\n            >\r\n              Delete Order\r\n            </Button>\r\n            {/* alert dialog for update */}\r\n            <AlertDialog\r\n              isOpen={isUpdateOpen}\r\n              leastDestructiveRef={cancelRef}\r\n              onClose={() => isUpdateOpen(false)}\r\n            >\r\n              <AlertDialogOverlay>\r\n                <AlertDialogContent w=\"90%\" pos=\"center\">\r\n                  <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\r\n                    {updateModal.header}\r\n                  </AlertDialogHeader>\r\n\r\n                  <AlertDialogBody>{updateModal.body}</AlertDialogBody>\r\n\r\n                  <AlertDialogFooter>\r\n                    <Button\r\n                      ref={cancelRef}\r\n                      onClick={() => setIsUpdateOpen(false)}\r\n                    >\r\n                      Cancel\r\n                    </Button>\r\n                    <Button\r\n                      colorScheme={updateModal.btnColor}\r\n                      ml={3}\r\n                      onClick={handleUpdateOrder}\r\n                    >\r\n                      Update\r\n                    </Button>\r\n                  </AlertDialogFooter>\r\n                </AlertDialogContent>\r\n              </AlertDialogOverlay>\r\n            </AlertDialog>\r\n            {/* alert dialog for delete */}\r\n            <AlertDialog\r\n              isOpen={isDeleteOpen}\r\n              leastDestructiveRef={cancelRef}\r\n              onClose={() => setIsDeleteOpen(false)}\r\n            >\r\n              <AlertDialogOverlay>\r\n                <AlertDialogContent w=\"90%\" pos=\"center\">\r\n                  <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\r\n                    {deleteModal.header}\r\n                  </AlertDialogHeader>\r\n\r\n                  <AlertDialogBody>{deleteModal.body}</AlertDialogBody>\r\n\r\n                  <AlertDialogFooter>\r\n                    <Button\r\n                      ref={cancelRef}\r\n                      onClick={() => setIsDeleteOpen(false)}\r\n                    >\r\n                      Cancel\r\n                    </Button>\r\n                    <Button\r\n                      colorScheme={deleteModal.btnColor}\r\n                      ml={3}\r\n                      onClick={handlDeleteOrder}\r\n                    >\r\n                      Delete\r\n                    </Button>\r\n                  </AlertDialogFooter>\r\n                </AlertDialogContent>\r\n              </AlertDialogOverlay>\r\n            </AlertDialog>\r\n          </>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default OrderDetailed;\r\n","D:\\Abony Price Directory\\price-directory\\src\\components\\CopyItems.js",[],"D:\\Abony Price Directory\\price-directory\\src\\index.js",[],"D:\\Abony Price Directory\\price-directory\\src\\pages\\ProductEditAdmin.js",["91","92","93"],"import { useState, useEffect } from \"react\";\r\nimport imageCompression from \"browser-image-compression\";\r\nimport styles from \"./productadd.module.scss\";\r\nimport firebase from \"../firebase\";\r\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\"; // requires a loader\r\nimport { Carousel } from \"react-responsive-carousel\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport backIcon from \"../assets/backIcon.png\";\r\n\r\nconst ProductAdmin = (props) => {\r\n  const [product, setProduct] = useState({});\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isUpdateLoading, setIsUpdateLoading] = useState(false);\r\n  const [isDeleteLoading, setIsDeleteLoading] = useState(false);\r\n  const ref = firebase.firestore().collection(\"products\");\r\n  const id = props.match.params.id;\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    const fetchData = async () => {\r\n      const snapshot = await ref.doc(id).get();\r\n      const data = await snapshot.data();\r\n      setProduct(data);\r\n      setIsLoading(false);\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  const updateProduct = async () => {\r\n    setIsUpdateLoading(true);\r\n\r\n    const db = firebase.firestore();\r\n    db.collection(\"products\")\r\n      .doc(id)\r\n      .set({ ...product });\r\n    setIsUpdateLoading(false);\r\n    history.push(\"/admin/products\");\r\n  };\r\n\r\n  const deleteProduct = () => {\r\n    setIsDeleteLoading(true);\r\n    const db = firebase.firestore();\r\n    db.collection(\"products\").doc(id).delete();\r\n    setIsDeleteLoading(false);\r\n    history.goBack();\r\n  };\r\n\r\n  // const compressImage = async (event) => {\r\n  //   //compresses image to below 1MB\r\n  //   let imagesFromInput = event.target.files;\r\n  //   const options = {\r\n  //     maxSizeMB: 1,\r\n  //     maxWidthOrHeight: 1280,\r\n  //     useWebWorker: true,\r\n  //   };\r\n  //   try {\r\n  //     for (let i = 0; i < imagesFromInput.length; i++) {\r\n  //       const compressedFile = await imageCompression(\r\n  //         imagesFromInput[i],\r\n  //         options\r\n  //       );\r\n  //       //look here\r\n  //       setProductImages((prevImages) => [...prevImages, compressedFile]);\r\n  //     }\r\n\r\n  //     // setProductImageConverted(URL.createObjectURL(compressedFile));\r\n  //   } catch (error) {\r\n  //     console.log(error);\r\n  //   }\r\n  // };\r\n\r\n  // const imageToServer = async (image) => {\r\n  //   // Upload image to firebase storage\r\n  //   let storageRef = firebase.storage().ref();\r\n  //   let imagesRef = storageRef.child(\"images\");\r\n  //   let imageNames = product.product_image;\r\n  //   // Points to 'images'\r\n  //   for (let i = 0; i < image.length; i++) {\r\n  //     let imageName = uuidv4();\r\n  //     let spaceRef = imagesRef.child(imageName);\r\n  //     let resp = await spaceRef.put(image[i]);\r\n  //     imageNames.push(imageName);\r\n  //   }\r\n  //   return imageNames;\r\n  // };\r\n\r\n  const handleBackClick = () => {\r\n    history.goBack();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className={styles.header}>\r\n        <button className={styles.backButton} onClick={handleBackClick}>\r\n          <img src={backIcon} className={styles.backIcon} alt=\"back_icon\" />\r\n        </button>\r\n        <h1 className={styles.label}>Product</h1>\r\n      </div>\r\n      {isLoading ? (\r\n        <div className={styles.loaderwraper}>\r\n          <Loader\r\n            type=\"Oval\"\r\n            color=\"#0278ae\"\r\n            height={50}\r\n            width={50}\r\n            visible={isLoading}\r\n          />\r\n        </div>\r\n      ) : (\r\n        <div></div>\r\n      )}\r\n      {!isLoading && (\r\n        <>\r\n          <div className={styles.container}>\r\n            <Carousel\r\n              infiniteLoop\r\n              dynamicHeight\r\n              showThumbs={false}\r\n              showStatus={false}\r\n              className={styles.carousel}\r\n            >\r\n              {product.product_image &&\r\n                product.product_image.map((image, index) => (\r\n                  <div style={{ height: 300, backgroundColor: `white` }}>\r\n                    <img\r\n                      key={index}\r\n                      src={`https://firebasestorage.googleapis.com/v0/b/abony-price-directory.appspot.com/o/images%2F${image}?alt=media`}\r\n                      className={styles.image}\r\n                      alt=\"image_preview\"\r\n                    />\r\n                  </div>\r\n                ))}\r\n            </Carousel>\r\n            <label>Product cod</label>\r\n            <input\r\n              type=\"text\"\r\n              value={product.product_cod}\r\n              onChange={(e) =>\r\n                setProduct({ ...product, product_cod: e.target.value })\r\n              }\r\n            />\r\n            <label>Product Price</label>\r\n            <input\r\n              type=\"number\"\r\n              value={product.product_price}\r\n              onChange={(e) =>\r\n                setProduct({ ...product, product_price: e.target.value })\r\n              }\r\n            />\r\n            <label>Product Sizes</label>\r\n            <div className={styles.productSizeContainer}>\r\n              <div className={styles.sizeItem}>\r\n                <label>XS</label>\r\n                <input\r\n                  type=\"number\"\r\n                  value={product.sizeXS}\r\n                  className={styles.sizeField}\r\n                  onChange={(e) =>\r\n                    setProduct({ ...product, sizeXS: e.target.value })\r\n                  }\r\n                />\r\n              </div>\r\n              <div className={styles.sizeItem}>\r\n                <label>S</label>\r\n                <input\r\n                  type=\"number\"\r\n                  value={product.sizeS}\r\n                  className={styles.sizeField}\r\n                  onChange={(e) =>\r\n                    setProduct({\r\n                      ...product,\r\n                      sizeS: e.target.value,\r\n                    })\r\n                  }\r\n                />\r\n              </div>\r\n              <div className={styles.sizeItem}>\r\n                <label>M</label>\r\n                <input\r\n                  type=\"number\"\r\n                  value={product.sizeM}\r\n                  className={styles.sizeField}\r\n                  onChange={(e) =>\r\n                    setProduct({\r\n                      ...product,\r\n                      sizeM: e.target.value,\r\n                    })\r\n                  }\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className={styles.productSizeContainer}>\r\n              <div className={styles.sizeItem}>\r\n                <label>L</label>\r\n                <input\r\n                  type=\"number\"\r\n                  value={product.sizeL}\r\n                  className={styles.sizeField}\r\n                  onChange={(e) =>\r\n                    setProduct({\r\n                      ...product,\r\n                      sizeL: e.target.value,\r\n                    })\r\n                  }\r\n                />\r\n              </div>\r\n              <div className={styles.sizeItem}>\r\n                <label>XL</label>\r\n                <input\r\n                  type=\"number\"\r\n                  value={product.sizeXL}\r\n                  className={styles.sizeField}\r\n                  onChange={(e) =>\r\n                    setProduct({\r\n                      ...product,\r\n                      sizeXL: e.target.value,\r\n                    })\r\n                  }\r\n                />\r\n              </div>\r\n              <div className={styles.sizeItem}>\r\n                <label>XXL</label>\r\n                <input\r\n                  type=\"number\"\r\n                  value={product.sizeXXL}\r\n                  className={styles.sizeField}\r\n                  onChange={(e) =>\r\n                    setProduct({\r\n                      ...product,\r\n                      sizeXXL: e.target.value,\r\n                    })\r\n                  }\r\n                />\r\n              </div>\r\n            </div>\r\n            <button onClick={updateProduct} className={styles.btnPrimary}>\r\n              {isUpdateLoading ? (\r\n                <div className={styles.loader}>\r\n                  <Loader\r\n                    type=\"Oval\"\r\n                    color=\"white\"\r\n                    height={18}\r\n                    width={18}\r\n                    visible={isUpdateLoading}\r\n                  />\r\n                </div>\r\n              ) : (\r\n                <div>Update Product</div>\r\n              )}\r\n            </button>\r\n            <button onClick={deleteProduct} className={styles.btnDanger}>\r\n              {isDeleteLoading ? (\r\n                <div className={styles.loader}>\r\n                  <Loader\r\n                    type=\"Oval\"\r\n                    color=\"white\"\r\n                    height={18}\r\n                    width={18}\r\n                    visible={isDeleteLoading}\r\n                  />\r\n                </div>\r\n              ) : (\r\n                <div>Delete Product</div>\r\n              )}\r\n            </button>\r\n          </div>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProductAdmin;\r\n","D:\\Abony Price Directory\\price-directory\\src\\pages\\ProductsAdmin.js",[],"D:\\Abony Price Directory\\price-directory\\src\\components\\TableSize.js",[],"D:\\Abony Price Directory\\price-directory\\src\\components\\useForm.js",[],"D:\\Abony Price Directory\\price-directory\\src\\pages\\addOrder.js",["94","95"],"import { React, useRef, useState } from \"react\";\r\nimport styles from \"./addOrder.module.scss\";\r\nimport imageCompression from \"browser-image-compression\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport backIcon from \"../assets/backIcon.png\";\r\nimport { useForm } from \"../components/useForm\";\r\nimport firebase from \"../firebase\";\r\nimport {\r\n  Input,\r\n  FormControl,\r\n  FormLabel,\r\n  Textarea,\r\n  Stack,\r\n  Radio,\r\n  RadioGroup,\r\n  Button,\r\n  AlertDialog,\r\n  AlertDialogBody,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogContent,\r\n  AlertDialogOverlay,\r\n} from \"@chakra-ui/react\";\r\n\r\nconst AddOrder = () => {\r\n  const [paymentMethod, setPaymentMethod] = useState(\"3\");\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [order, setOrder, updateOrder] = useForm([]);\r\n  const [imageConverted, setImageConverted] = useState();\r\n  const cancelRef = useRef();\r\n  const history = useHistory();\r\n  const db = firebase.firestore();\r\n\r\n  const addOrder = async () => {\r\n    setIsOpen(false);\r\n    setIsLoading(true);\r\n\r\n    let imageName = await imageToServer(imageConverted);\r\n    db.collection(\"orders\").add({\r\n      date: Date.now(),\r\n      payment_method: paymentMethod,\r\n      order_status: \"1\",\r\n      product_image: imageName,\r\n      ...order,\r\n    });\r\n    setIsLoading(false);\r\n    history.push(\"/orders\");\r\n  };\r\n  const compressImage = async (event) => {\r\n    //compresses image to below 1MB\r\n    const options = {\r\n      maxSizeMB: 1,\r\n      maxWidthOrHeight: 1280,\r\n      useWebWorker: true,\r\n    };\r\n    try {\r\n      const compressedFile = await imageCompression(\r\n        event.target.files[0],\r\n        options\r\n      );\r\n      setImageConverted(compressedFile);\r\n      // setProductImageConverted(URL.createObjectURL(compressedFile));\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n  const imageToServer = async (image) => {\r\n    //upload image to firebase storage\r\n    let storageRef = firebase.storage().ref();\r\n    let imagesRef = storageRef.child(\"images\");\r\n    let imageName = uuidv4();\r\n    let spaceRef = imagesRef.child(imageName);\r\n    let resp = await spaceRef.put(image);\r\n    return imageName;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className={styles.header}>\r\n        <button className={styles.backButton} onClick={() => history.goBack()}>\r\n          <img src={backIcon} className={styles.backIcon} alt=\"back_icon\" />\r\n        </button>\r\n        <h1 className={styles.label}>Add Order</h1>\r\n      </div>\r\n      <div className={styles.container}>\r\n        <FormControl w=\"90%\" mt=\"2\" isRequired>\r\n          <FormLabel>Customer Name :</FormLabel>\r\n          <Input\r\n            type=\"text\"\r\n            size=\"lg\"\r\n            name=\"customer_name\"\r\n            onChange={updateOrder}\r\n          />\r\n        </FormControl>\r\n        <FormControl id=\"customer_address\" w=\"90%\" mt=\"2\" isRequired>\r\n          <FormLabel>Address :</FormLabel>\r\n          <Textarea\r\n            type=\"text\"\r\n            size=\"lg\"\r\n            rows=\"4\"\r\n            name=\"customer_address\"\r\n            onChange={updateOrder}\r\n          />\r\n        </FormControl>\r\n        <img\r\n          src={imageConverted && URL.createObjectURL(imageConverted)}\r\n          width=\"200px\"\r\n          alt=\"image_preview\"\r\n        />\r\n        <input\r\n          type=\"file\"\r\n          accept=\"image/*\"\r\n          id=\"file-upload\"\r\n          onChange={(event) => compressImage(event)}\r\n        />\r\n        <FormControl id=\"product_cod\" w=\"90%\" mt=\"2\" isRequired>\r\n          <FormLabel>Product Code:</FormLabel>\r\n          <Input\r\n            type=\"text\"\r\n            size=\"lg\"\r\n            name=\"product_cod\"\r\n            onChange={updateOrder}\r\n          />\r\n        </FormControl>\r\n        <FormControl id=\"product_price\" w=\"90%\" mt=\"2\" isRequired>\r\n          <FormLabel>Product Price :</FormLabel>\r\n          <Input\r\n            type=\"number\"\r\n            size=\"lg\"\r\n            name=\"product_price\"\r\n            onChange={updateOrder}\r\n          />\r\n        </FormControl>\r\n        <FormControl id=\"product_size\" w=\"90%\" mt=\"2\" isRequired>\r\n          <FormLabel>Product Size :</FormLabel>\r\n          <Input\r\n            type=\"text\"\r\n            size=\"lg\"\r\n            name=\"product_size\"\r\n            onChange={updateOrder}\r\n          />\r\n        </FormControl>\r\n        <FormControl id=\"payment_method\" w=\"90%\" mt=\"2\" isRequired>\r\n          <FormLabel>Payment Method :</FormLabel>\r\n          <RadioGroup\r\n            onChange={setPaymentMethod}\r\n            value={paymentMethod}\r\n            name=\"payement_method\"\r\n          >\r\n            <Stack direction=\"row\">\r\n              <Radio value=\"1\">Gpay PhonePe</Radio>\r\n              <Radio value=\"2\">Account Transfer</Radio>\r\n              <Radio value=\"3\">COD</Radio>\r\n            </Stack>\r\n          </RadioGroup>\r\n        </FormControl>\r\n        {paymentMethod !== \"3\" && (\r\n          <FormControl id=\"trasfer_details\" w=\"90%\" mt=\"2\" isRequired>\r\n            <FormLabel>Transfer Details :</FormLabel>\r\n            <Textarea\r\n              type=\"text\"\r\n              size=\"lg\"\r\n              rows=\"2\"\r\n              name=\"transfer_details\"\r\n              onChange={updateOrder}\r\n            />\r\n          </FormControl>\r\n        )}\r\n        <Button\r\n          colorScheme=\"teal\"\r\n          variant=\"solid\"\r\n          size=\"xs\"\r\n          w=\"90%\"\r\n          padding=\"6\"\r\n          mt=\"6\"\r\n          mb=\"6\"\r\n          isLoading={isLoading}\r\n          loadingText=\"Uploading\"\r\n          onClick={() => setIsOpen(true)}\r\n        >\r\n          Add order\r\n        </Button>\r\n        <AlertDialog\r\n          isOpen={isOpen}\r\n          leastDestructiveRef={cancelRef}\r\n          onClose={() => setIsOpen(false)}\r\n        >\r\n          <AlertDialogOverlay>\r\n            <AlertDialogContent w=\"90%\" pos=\"center\">\r\n              <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\r\n                Add Order\r\n              </AlertDialogHeader>\r\n\r\n              <AlertDialogBody>\r\n                Are you sure you want to add this order ?\r\n              </AlertDialogBody>\r\n\r\n              <AlertDialogFooter>\r\n                <Button ref={cancelRef} onClick={() => setIsOpen(false)}>\r\n                  Cancel\r\n                </Button>\r\n                <Button colorScheme=\"green\" ml={3} onClick={addOrder}>\r\n                  Add\r\n                </Button>\r\n              </AlertDialogFooter>\r\n            </AlertDialogContent>\r\n          </AlertDialogOverlay>\r\n        </AlertDialog>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddOrder;\r\n","D:\\Abony Price Directory\\price-directory\\src\\pages\\orders.js",["96"],"D:\\Abony Price Directory\\price-directory\\src\\App.js",[],"D:\\Abony Price Directory\\price-directory\\src\\pages\\addCategoryAdmin.js",[],"D:\\Abony Price Directory\\price-directory\\src\\pages\\categoriesAdmin.js",["97"],"D:\\Abony Price Directory\\price-directory\\src\\firebase.js",[],{"ruleId":"98","severity":1,"message":"99","line":33,"column":6,"nodeType":"100","endLine":33,"endColumn":8,"suggestions":"101"},{"ruleId":"102","severity":1,"message":"103","line":16,"column":3,"nodeType":"104","messageId":"105","endLine":16,"endColumn":11},{"ruleId":"102","severity":1,"message":"106","line":17,"column":3,"nodeType":"104","messageId":"105","endLine":17,"endColumn":8},{"ruleId":"102","severity":1,"message":"107","line":18,"column":3,"nodeType":"104","messageId":"105","endLine":18,"endColumn":8},{"ruleId":"102","severity":1,"message":"108","line":19,"column":3,"nodeType":"104","messageId":"105","endLine":19,"endColumn":13},{"ruleId":"102","severity":1,"message":"109","line":20,"column":3,"nodeType":"104","messageId":"105","endLine":20,"endColumn":9},{"ruleId":"102","severity":1,"message":"110","line":21,"column":3,"nodeType":"104","messageId":"105","endLine":21,"endColumn":14},{"ruleId":"102","severity":1,"message":"111","line":22,"column":3,"nodeType":"104","messageId":"105","endLine":22,"endColumn":18},{"ruleId":"102","severity":1,"message":"112","line":23,"column":3,"nodeType":"104","messageId":"105","endLine":23,"endColumn":20},{"ruleId":"102","severity":1,"message":"113","line":24,"column":3,"nodeType":"104","messageId":"105","endLine":24,"endColumn":20},{"ruleId":"102","severity":1,"message":"114","line":25,"column":3,"nodeType":"104","messageId":"105","endLine":25,"endColumn":21},{"ruleId":"102","severity":1,"message":"115","line":26,"column":3,"nodeType":"104","messageId":"105","endLine":26,"endColumn":21},{"ruleId":"98","severity":1,"message":"116","line":76,"column":6,"nodeType":"100","endLine":76,"endColumn":8,"suggestions":"117"},{"ruleId":"118","severity":1,"message":"119","line":193,"column":11,"nodeType":"120","endLine":193,"endColumn":22},{"ruleId":"118","severity":1,"message":"119","line":215,"column":11,"nodeType":"120","endLine":215,"endColumn":24},{"ruleId":"118","severity":1,"message":"119","line":232,"column":11,"nodeType":"120","endLine":232,"endColumn":26},{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","replacedBy":"124"},{"ruleId":"102","severity":1,"message":"125","line":34,"column":10,"nodeType":"104","messageId":"105","endLine":34,"endColumn":21},{"ruleId":"98","severity":1,"message":"126","line":65,"column":6,"nodeType":"100","endLine":65,"endColumn":8,"suggestions":"127"},{"ruleId":"102","severity":1,"message":"128","line":70,"column":11,"nodeType":"104","messageId":"105","endLine":70,"endColumn":17},{"ruleId":"102","severity":1,"message":"129","line":2,"column":8,"nodeType":"104","messageId":"105","endLine":2,"endColumn":24},{"ruleId":"102","severity":1,"message":"130","line":7,"column":16,"nodeType":"104","messageId":"105","endLine":7,"endColumn":22},{"ruleId":"98","severity":1,"message":"131","line":31,"column":6,"nodeType":"100","endLine":31,"endColumn":8,"suggestions":"132"},{"ruleId":"102","severity":1,"message":"133","line":30,"column":17,"nodeType":"104","messageId":"105","endLine":30,"endColumn":25},{"ruleId":"102","severity":1,"message":"134","line":75,"column":9,"nodeType":"104","messageId":"105","endLine":75,"endColumn":13},{"ruleId":"98","severity":1,"message":"135","line":27,"column":6,"nodeType":"100","endLine":27,"endColumn":8,"suggestions":"136"},{"ruleId":"98","severity":1,"message":"137","line":35,"column":6,"nodeType":"100","endLine":35,"endColumn":18,"suggestions":"138"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'productsRef' and 'updateProductsState'. Either include them or remove the dependency array.","ArrayExpression",["139"],"no-unused-vars","'Textarea' is defined but never used.","Identifier","unusedVar","'Stack' is defined but never used.","'Radio' is defined but never used.","'RadioGroup' is defined but never used.","'Button' is defined but never used.","'AlertDialog' is defined but never used.","'AlertDialogBody' is defined but never used.","'AlertDialogFooter' is defined but never used.","'AlertDialogHeader' is defined but never used.","'AlertDialogContent' is defined but never used.","'AlertDialogOverlay' is defined but never used.","React Hook useEffect has a missing dependency: 'setProduct'. Either include it or remove the dependency array.",["140"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-native-reassign",["141"],"no-negated-in-lhs",["142"],"'orderStatus' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'id', 'ref', and 'setOrder'. Either include them or remove the dependency array.",["143"],"'update' is assigned a value but never used.","'imageCompression' is defined but never used.","'uuidv4' is defined but never used.","React Hook useEffect has missing dependencies: 'id' and 'ref'. Either include them or remove the dependency array.",["144"],"'setOrder' is assigned a value but never used.","'resp' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'db'. Either include it or remove the dependency array.",["145"],"React Hook useEffect has a missing dependency: 'handleFilter'. Either include it or remove the dependency array.",["146"],{"desc":"147","fix":"148"},{"desc":"149","fix":"150"},"no-global-assign","no-unsafe-negation",{"desc":"151","fix":"152"},{"desc":"153","fix":"154"},{"desc":"155","fix":"156"},{"desc":"157","fix":"158"},"Update the dependencies array to be: [productsRef, updateProductsState]",{"range":"159","text":"160"},"Update the dependencies array to be: [setProduct]",{"range":"161","text":"162"},"Update the dependencies array to be: [id, ref, setOrder]",{"range":"163","text":"164"},"Update the dependencies array to be: [id, ref]",{"range":"165","text":"166"},"Update the dependencies array to be: [db]",{"range":"167","text":"168"},"Update the dependencies array to be: [categories, handleFilter]",{"range":"169","text":"170"},[1371,1373],"[productsRef, updateProductsState]",[2398,2400],"[setProduct]",[2000,2002],"[id, ref, setOrder]",[1243,1245],"[id, ref]",[865,867],"[db]",[1070,1082],"[categories, handleFilter]"]